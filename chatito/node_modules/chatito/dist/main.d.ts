import { IChatitoEntityAST, IEntities, ISentenceTokens, IStatCache, IUtteranceWriter } from './types';
export declare const VALID_DISTRIBUTIONS: readonly ["regular", "even"];
export declare const VALID_AUTO_ALIASES: readonly ["allow", "warn", "restrict"];
export declare type distributionType = typeof VALID_DISTRIBUTIONS[number];
export declare type autoAliasesType = typeof VALID_AUTO_ALIASES[number];
export interface IConfigOptions {
    defaultDistribution?: distributionType;
    autoAliases?: autoAliasesType;
}
declare type Configuration = Required<IConfigOptions>;
export declare const config: Configuration;
export declare const getVariationsFromEntity: <T>(ed: IChatitoEntityAST, entities: IEntities, optional: boolean, cache: Map<string, IStatCache>) => Promise<ISentenceTokens[]>;
export declare const getExampleByNumber: (defs: IEntities, entity: IChatitoEntityAST, combinationNumber: number) => ISentenceTokens[];
export declare function allExamplesGenerator(defs: IEntities, entity: IChatitoEntityAST): IterableIterator<ISentenceTokens[]>;
export declare type IFileImporter = (fromPath: string, importFile: string) => {
    filePath: string;
    dsl: string;
};
export declare const astFromString: (str: string) => IChatitoEntityAST[];
export declare const datasetFromString: (str: string, writterFn: IUtteranceWriter, importer?: IFileImporter | undefined, currentPath?: string | undefined) => Promise<void>;
export declare const getImports: (from: string, to: string, importer: IFileImporter) => IChatitoEntityAST[];
export declare const definitionsFromAST: (initialAst: IChatitoEntityAST[], importHandler?: IFileImporter | undefined, currPath?: string | undefined) => IEntities | undefined;
export declare const datasetFromAST: (initialAst: IChatitoEntityAST[], writterFn: IUtteranceWriter, importHandler?: IFileImporter | undefined, currPath?: string | undefined) => Promise<void>;
export {};
