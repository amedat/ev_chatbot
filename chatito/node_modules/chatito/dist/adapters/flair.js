"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Tokenizer = require("wink-tokenizer");
const gen = require("../main");
const tokenizer = new Tokenizer();
function streamAdapter(dsl, ws, imp, currPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const utteranceWriter = (utterance, intentKey, isTrainingExample) => {
            const classificationText = utterance.map(v => v.value).join('');
            const classificationLabel = intentKey.replace(/\s+/g, '');
            const writeStreamClassif = isTrainingExample ? ws.trainClassification : ws.testClassification;
            writeStreamClassif.write(`__label__${classificationLabel} ${classificationText}` + '\n');
            const writeStreamNER = isTrainingExample ? ws.trainNER : ws.testNER;
            utterance.forEach(v => {
                const wordTokens = tokenizer.tokenize(v.value);
                if (v.type === 'Slot') {
                    wordTokens.forEach((wt, idx) => {
                        const slotBorI = idx === 0 ? 'B' : 'I';
                        const slotTag = v.slot.toLocaleUpperCase().replace(/\s+/g, '');
                        writeStreamNER.write(`${wt.value} ${slotBorI}-${slotTag}` + '\n');
                    });
                }
                else {
                    wordTokens.forEach(wt => writeStreamNER.write(`${wt.value} O` + '\n'));
                }
            });
            writeStreamNER.write('\n');
        };
        yield gen.datasetFromString(dsl, utteranceWriter, imp, currPath);
    });
}
exports.streamAdapter = streamAdapter;
