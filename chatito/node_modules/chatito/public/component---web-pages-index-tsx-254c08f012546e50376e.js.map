{"version":3,"sources":["webpack:///./src/main.ts","webpack:///./src/utils.ts","webpack:///./src/adapters/luis.ts","webpack:///./src/adapters/rasa.ts","webpack:///./src/adapters/snips.ts","webpack:///./src/adapters/web.ts","webpack:///./web/lib/editorConfig.ts","webpack:///./web/components/Editor/editorStyles.tsx","webpack:///./web/components/Editor/Editor.tsx","webpack:///./web/lib/utils.ts","webpack:///./web/components/globalStyles.tsx","webpack:///./web/components/Logo.tsx","webpack:///./web/pages/index.tsx","webpack:///./parser/chatito.js"],"names":["allExamplesGenerator","logger","console","config","defaultDistribution","chatito","require","chance","getEntityKey","token","value","chatitoFormatPostProcess","data","arr","reduce","accumulator","next","i","arrShadow","length","lastWord","type","replace","trim","Object","assign","Error","calcSentencesProbabilities","isPercentageProbability","isEvenDistribution","definedSentenceProbabilities","sumOfTotalProbabilitiesDefined","maxCounts","sentencesWithNullProbabilityCount","totalMaxCountsToShareBetweenNullProbs","prob","map","p","getVariationsFromEntity","_ref","_asyncToGenerator","regenerator_default","a","mark","_callee","ed","entities","optional","cache","variationKey","cacheKey","cacheStats","counts","probabilityTypeDefined","_iterator","_isArray","_i","_ref2","c","isPercent","setenceProbabilityType","probabilities","currentEntityCache","optionalProb","sentenceIndex","sentence","isSlotDefSentenceWithOnlyOneAlias","_iterator2","_isArray2","_i2","_ref3","t","slotsInSentenceKeys","def","innerEntityKey","currentCache","sentenceVariation","returnSentenceTokens","_iterator3","_isArray3","_i3","_ref4","returnToken","ettArgs","wrap","_context","prev","key","inner","s","cardinality","distribution","Array","isArray","Symbol","iterator","abrupt","done","parseFloat","main_chance","bool","likelihood","Set","Map","opt","sent","args","stop","_x","_x2","_x3","_x4","apply","this","arguments","getExampleByNumber","defs","entity","combinationNumber","lookupNumber","find","prevCardinality","prevRemaining","resultTokens","example","innerEntity","Slot","entityKey","innerNumber","tokens","_context2","_marked","calcCardinality","acc","tokenCardinality","getCardinality","getRefKey","item","hasTokenWithoutCardinality","refs","parentKey","some","refKey","undefined","checkLoopIn","path","last","_iterator4","_isArray4","_i4","_ref5","parent","loop","reverse","checkLoop","_i5","_Object$keys","_key","findNestedSlots","_iterator5","_isArray5","_i6","_ref6","firstIndex","findIndex","slotsPath","preCalcCardinality","uncalced","Intent","Alias","totalUncalced","lastUncalced","_loop","_isArray6","_i8","_iterator6","_ref7","keys","filter","_i7","_Object$keys2","_key2","checkNestedSlots","astFromString","str","datasetFromString","writterFn","importer","currentPath","ast","datasetFromAST","definitionsFromAST","initialAst","importHandler","currPath","operatorDefinitions","filePath","dsl","concat","od","getImports","from","to","fileContent","importAst","outAst","ett","e","message","JSON","location","odKey","aliases","_i9","_arr","_i11","_Object$keys3","_iterator7","_isArray7","_i10","_ref8","alias","probability","addMissingAliases","_ref9","_callee2","intentKeys","_i12","_intentKeys","intentKey","maxPossibleCombinations","maxIntentExamples","entityArgs","trainingN","testingN","generatedTrainingExamplesCount","generatedTestingExamplesCount","intentMax","maxEx","globalCache","collitionsCache","_iterator8","_isArray8","_i13","_ref10","utterance","utteranceString","completedTraining","completedTesting","isTrainingExample","trainingLeft","testingLeft","duplicatesCounter","intentSentence","_utterance","_utteranceString","_completedTraining","_completedTesting","_isTrainingExample","maxDupes","maxDupesLimit","isBigDataset","m","_context3","training","parseInt","testing","n","Math","_x5","_x6","_x7","_x8","isObject","mergeDeep","target","source","_Object$assign","_Object$assign2","luis_adapter","_adapter","formatOptions","utteranceWriter","utils","slot","endCharIndex","entityName","startCharIndex","text","intentName","entityLabels","gen","rasa_adapter","adapters_rasa_adapter","synonyms","rasa_nlu_data","regex_features","entity_synonyms","common_examples","synonym","end","start","intent","k","snips_adapter","adapters_snips_adapter","synonymsForSlots","language","intents","utterances","u","ret","slotKey","synonymsValue","slotSynonymsSet","synonymsList","push","web_adapter","adapters_web_adapter","dataset","tabs","title","chatitoPrism","comments","pattern","greedy","imports","intentDefinition","inside","intentArguments","slotDefinition","slotArguments","aliasDefinition","aliasArguments","default","rasaDefaultOptions","snipsDefaultOptions","AlertNotification","styled","withConfig","displayName","componentId","state","CodeStyles","TabButton","active","CloseTab","EditorHeader","TabsAreaButton","TabsArea","EditorWrapper","Drawer","showDrawer","EditorOverlay","BlockWrapper","BlockWrapperTitle","CloseDrawerButton","DrawerFormField","SelectWrapper","CheckboxWrapper","adapters","web_namespaceObject","rasa","rasa_namespaceObject","snips","snips_namespaceObject","luis","luisAdapter","CodeFlask","ReactJson","window","Editor","func","wait","timeout","error","warning","activeTabIndex","adapterOptions","currentAdapter","useCustomOptions","frequencyDistribution","tabsContainer","React","codeflask","editorUpdatesSetupCount","codeInputValue","debouncedTabDSLValidation","_this","validation","getDSLValidation","newState","setState","saveToLocalStorage","_len","context","clearTimeout","setTimeout","renderDatasetGeneratorSettings","react","style","display","flexDirection","borderRight","htmlFor","id","name","onChange","onAdapterChange","onDistributionChange","checked","onCustomOptionsCheckboxChange","textAlign","fontSize","maxWidth","margin","href","renderEditAdapterOptions","padding","onClick","generateDataset","borderTop","flex","src","theme","iconStyle","enableClipboard","displayDataTypes","collapsed","onEdit","onEditAdapterOptions","onAdd","onDelete","renderDatasetPreviewer","renderTabButton","onCloseTab","closerTab","changeTab","onCloseDrawer","changes","updated_src","onAddFile","filename","prompt","current","scrollTo","left","scrollWidth","behavior","onToggleDrawer","validateChatitoFiles","t0","alert","saveTabs","saveAdapterOptions","saveCurrentAdapter","localStorage","loadFromLocalIfPresent","parseAsJSON","loadFromLocalStorage","cb","localTabs","localAdapterOptions","localCurrentAdapter","localDefaultDistribution","updateCode","setLineNumber","ati","newActiveTabIndex","slice","intentsWithoutLimit","column","tab","importFile","startPath","endPath","tabFound","testingDataset","adapter","_loop2","_ret","datasetBlob","testingBlob","v","entries","delegateYield","t1","Blob","saveAs","Date","getTime","componentDidMount","_this2","flask","lineNumbers","code","render","alertState","innerRef","backgroundColor","disabled","stopPropagation","Global","createGlobalStyle","_templateObject","Header","Logo","fill","viewBox","version","x","y","stroke","d","Index","Helmet_default","rel","sizes","__PATH_PREFIX__","color","content","width","minWidth","height","paddingLeft","Editor_Editor","peg$SyntaxError","expected","found","captureStackTrace","child","ctor","constructor","prototype","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","class","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","toUpperCase","j","descriptions","sort","join","describeExpected","describeFound","module","exports","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","Start","peg$parseStart","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$literalExpectation","peg$c3","peg$c4","peg$c5","peg$c6","peg$c7","percent","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","o","peg$c29","peg$c30","peg$c31","peg$c32","variation","peg$c33","peg$c34","peg$c35","peg$c36","op","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$otherExpectation","peg$c44","peg$c45","peg$c46","level","STEP","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","substring","peg$savedPos","peg$currPos","peg$c58","peg$c59","peg$c60","peg$c61","peg$classExpectation","peg$c62","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","peg$c74","curr","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","ek","ev","peg$c80","peg$c81","peg$c82","chars","peg$c83","peg$c84","peg$c85","peg$c86","peg$c87","char","peg$c88","sequence","peg$c89","peg$c90","peg$c91","peg$c92","peg$c93","peg$c94","peg$c95","peg$c96","peg$c97","peg$c98","peg$c99","peg$c100","peg$c101","peg$c102","peg$c103","peg$c104","peg$c105","peg$c106","peg$c107","peg$c108","peg$c109","digits","String","fromCharCode","peg$c110","peg$c111","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","peg$computeLocation","ignoreCase","peg$computePosDetails","pos","details","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","peg$buildStructuredError","s0","s1","peg$parseImportFile","peg$parseTopLevelStatement","peg$parseCommentLine","s2","s5","peg$parseEOL","s3","peg$parseEntityBody","peg$parseEntityArguments","peg$parseEntityIntentDefinition","peg$parseIndent","peg$parseIntentAndSlotInnerStatements","peg$parseDedent","peg$parseIntentDefinition","s4","substr","peg$parseSlotKeywordLiteral","peg$parseSlotVariationDefinition","peg$parseEntitySlotDefinition","peg$parseSlotInnerStatement","peg$parseSlotInnerStatements","peg$parseSlotDefinition","peg$parseEntityAliasDefinition","peg$parseAliasDefinition","peg$parseProbabilityOperatorDefinition","peg$parsezero","test","charAt","peg$parseDigit1_9","peg$parseDigit0_9","peg$parseint","peg$parseDecimalPoint","peg$parsefrac","peg$parseNumber","peg$parseEntityOpt","peg$parseEntityKeywordLiteral","peg$parseIntentAndSlotKeywordLiterals","s6","s7","s8","peg$parseAnyTextWithSlotAndAlias","peg$parseIntentAndSlotInnerStatement","peg$parseSamedent","peg$parseOptionalSlot","peg$parseOptionalAlias","peg$parseIntentAndSlotValidInner","peg$parseEOS","peg$parseSlotVariationStartDefinition","peg$parseSlotOptionalBody","peg$parseSlotKeywordLiterals","peg$parseAnyTextWithAlias","peg$parseSlotValidInner","peg$parseEntityOptionalBody","peg$parseAnyTextWithoutEOL","peg$parseDoubleSlashCommentLine","peg$parseHashCommentLine","s9","peg$parseEOF","peg$parseEOLNonWindows","peg$parseEOLWindows","peg$parseEntityArg","peg$parseArgumentKeyValueString","peg$parseDoubleQuotedString","peg$parseSingleQuotedString","peg$parseStringEscapedChars","peg$parseHEXDIG"],"mappings":"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","file":"component---web-pages-index-tsx-254c08f012546e50376e.js","sourcesContent":["import { Chance } from 'chance';\nimport {\n    IChatitoCache,\n    IChatitoEntityAST,\n    IChatitoParser,\n    IEntities,\n    IEntityDef,\n    ISentenceTokens,\n    IStatCache,\n    IUtteranceWriter\n} from './types';\n\nconst logger = console;\n\nexport const VALID_DISTRIBUTIONS = ['regular', 'even'] as const;\n\nexport interface IConfigOptions {\n    defaultDistribution?: typeof VALID_DISTRIBUTIONS[number];\n}\n\ntype Configuration = Required<IConfigOptions>;\n\nexport const config: Configuration = {\n    defaultDistribution: 'regular'\n};\n\n// tslint:disable-next-line:no-var-requires\nconst chatito = require('../parser/chatito') as IChatitoParser;\nconst chance = new Chance();\n\n/**\n * Returns the entity key for the Alias/Slot that `token` refers to\n * @param token Sentence's token\n */\nconst getEntityKey = (token: ISentenceTokens) => (token.variation ? `${token.value}#${token.variation}` : token.value);\n\nconst chatitoFormatPostProcess = (data: ISentenceTokens[]) => {\n    const arr = data.reduce(\n        (accumulator: ISentenceTokens[], next: ISentenceTokens, i, arrShadow) => {\n            if (accumulator.length) {\n                const lastWord = accumulator[accumulator.length - 1];\n                if (lastWord.type === next.type && lastWord.type === 'Text') {\n                    accumulator[accumulator.length - 1] = {\n                        type: lastWord.type,\n                        value: (lastWord.value + next.value).replace(/\\s+/g, ' ')\n                    };\n                } else {\n                    accumulator.push(next);\n                }\n            } else if (next.value.trim()) {\n                accumulator.push(next);\n            }\n            if (i === arrShadow.length - 1) {\n                // if its the last token of a sentence\n                // remove empty strings at the end\n                if (accumulator.length) {\n                    if (!accumulator[accumulator.length - 1].value.trim()) {\n                        accumulator.pop();\n                    }\n                    accumulator[accumulator.length - 1] = Object.assign({}, accumulator[accumulator.length - 1], {\n                        value: accumulator[accumulator.length - 1].value.replace(/\\s+$/g, '')\n                    });\n                }\n            }\n            return accumulator;\n        },\n        [] as ISentenceTokens[]\n    );\n    if (arr.length) {\n        arr[0] = Object.assign({}, arr[0], {\n            value: arr[0].value.replace(/^\\s+/, '')\n        });\n    }\n    if (!arr.length) {\n        throw new Error(`Some sentence generated an empty string. Can't map empty to an intent.`);\n    }\n    return arr;\n};\n\nconst calcSentencesProbabilities = (\n    isPercentageProbability: boolean,\n    isEvenDistribution: boolean,\n    definedSentenceProbabilities: Array<number | null>,\n    sumOfTotalProbabilitiesDefined: number,\n    maxCounts: number[]\n) => {\n    let sentencesWithNullProbabilityCount = 0;\n    let totalMaxCountsToShareBetweenNullProbs = 0;\n    definedSentenceProbabilities.forEach((prob, i) => {\n        if (prob === null) {\n            sentencesWithNullProbabilityCount += 1;\n            totalMaxCountsToShareBetweenNullProbs += maxCounts[i];\n        }\n    });\n    let probabilities: number[];\n    if (isPercentageProbability) {\n        // if defined probabilities is percentual, then calculate each sentence chances in percent\n        probabilities = definedSentenceProbabilities.map((p, i) => {\n            if (p !== null) {\n                return p;\n            }\n            if (isEvenDistribution) {\n                return (100 - sumOfTotalProbabilitiesDefined) / sentencesWithNullProbabilityCount;\n            }\n            return (((maxCounts[i] * 100) / totalMaxCountsToShareBetweenNullProbs) * (100 - sumOfTotalProbabilitiesDefined)) / 100;\n        });\n    } else {\n        // if probabilityTypeDefined is weighted, then multiply the weight by max counts\n        probabilities = definedSentenceProbabilities.map((p, i) => {\n            if (p !== null) {\n                return isEvenDistribution ? p : maxCounts[i] * p;\n            }\n            if (isEvenDistribution) {\n                return 1;\n            }\n            return maxCounts[i];\n        });\n    }\n    return probabilities;\n};\n\n// recursive function that generates variations using a cache\n// that uses counts to avoid repetitions\nexport const getVariationsFromEntity = async <T>(\n    ed: IChatitoEntityAST,\n    entities: IEntities,\n    optional: boolean,\n    cache: IChatitoCache\n): Promise<ISentenceTokens[]> => {\n    // if this entity is a slot variation, add that as the key\n    const variationKey = ed.variation ? `#${ed.variation}` : '';\n    const cacheKey = `${ed.type}-${ed.key}${variationKey}`;\n    let cacheStats = cache.get(cacheKey) as IStatCache;\n    if (!cacheStats) {\n        // if the entity is not cache, create an empty cache for it\n        const counts: IChatitoCache[] = [];\n        const maxCounts: number[] = ed.inner.map(s => s.cardinality!);\n        let probabilityTypeDefined: 'w' | '%' | null = null;\n        const definedSentenceProbabilities: Array<number | null> = []; // the posibility operators defined for sentences\n        let isEvenDistribution = config.defaultDistribution === 'even';\n        if (ed.args && ed.args.distribution) {\n            isEvenDistribution = ed.args.distribution === 'even';\n        }\n        let sumOfTotalProbabilitiesDefined = 0;\n        for (const c of ed.inner) {\n            // get counts for each of the sentences inside the entity\n            counts.push(new Map());\n            if (c.probability === null) {\n                definedSentenceProbabilities.push(null);\n            } else {\n                const p = c.probability || '';\n                const isPercent = p.slice(-1) === '%';\n                const setenceProbabilityType = isPercent ? '%' : 'w';\n                if (probabilityTypeDefined === null) {\n                    probabilityTypeDefined = setenceProbabilityType;\n                } else if (setenceProbabilityType !== probabilityTypeDefined) {\n                    throw new Error(`All probability definitions for \"${cacheKey}\" must be of the same type.`);\n                }\n                const prob = parseFloat(isPercent ? p.slice(0, -1) : p);\n                if (isPercent) {\n                    if (prob <= 0 || prob > 100) {\n                        throw new Error(`Probability \"${p}\" must be greater than 0 up to 100. At ${cacheKey}`);\n                    }\n                } else if (setenceProbabilityType === 'w') {\n                    if (prob <= 0) {\n                        throw new Error(`Probability weight \"${p}\" must be greater than 0. At ${cacheKey}`);\n                    }\n                }\n                sumOfTotalProbabilitiesDefined += prob;\n                definedSentenceProbabilities.push(prob);\n            }\n        }\n        if (probabilityTypeDefined === '%' && sumOfTotalProbabilitiesDefined && sumOfTotalProbabilitiesDefined > 100) {\n            throw new Error(\n                `The sum of sentence probabilities (${sumOfTotalProbabilitiesDefined}) for an entity can't be higher than 100%. At ${cacheKey}`\n            );\n        }\n        const isPercentageProbability = probabilityTypeDefined === '%';\n        const probabilities = calcSentencesProbabilities(\n            isPercentageProbability,\n            isEvenDistribution,\n            definedSentenceProbabilities,\n            sumOfTotalProbabilitiesDefined,\n            maxCounts\n        );\n        const currentEntityCache: IStatCache = { counts, maxCounts, probabilities };\n        cache.set(cacheKey, currentEntityCache);\n        cacheStats = cache.get(cacheKey) as IStatCache;\n    }\n    // NOTE: if an entity has 5 sentences we add one (the optional empty sentence) and get that probability\n    const optionalProb = 100 / (cacheStats.probabilities.length + 1);\n    const sentenceIndex = chance.weighted(Array.from(cacheStats.probabilities.keys()), cacheStats.probabilities);\n    if (optional && chance.bool({ likelihood: optionalProb })) {\n        return [];\n    }\n    const sentence = ed.inner[sentenceIndex].sentence;\n    let accumulator: ISentenceTokens[] = [];\n    // For slots where a sentence is composed of only one alias, we add the synonym tag,\n    // to denote that the generated alias is a synonym of its alias name\n    const isSlotDefSentenceWithOnlyOneAlias = ed.type === 'SlotDefinition' && sentence.length === 1 && sentence[0].type === 'Alias';\n    for (const t of sentence) {\n        // slots and alias entities generate the sentences recursively\n        const slotsInSentenceKeys: Set<string> = new Set([]);\n        if (t.type === 'Slot' || t.type === 'Alias') {\n            const def = entities[t.type];\n            const innerEntityKey = getEntityKey(t);\n            const currentCache = slotsInSentenceKeys.has(innerEntityKey) ? cacheStats.counts[sentenceIndex] : new Map();\n            slotsInSentenceKeys.add(innerEntityKey);\n            const sentenceVariation = await getVariationsFromEntity(def[innerEntityKey], entities, !!t.opt, currentCache);\n            if (sentenceVariation.length) {\n                const returnSentenceTokens = chatitoFormatPostProcess(sentenceVariation);\n                for (const returnToken of returnSentenceTokens) {\n                    const ettArgs = def[innerEntityKey].args;\n                    if (isSlotDefSentenceWithOnlyOneAlias && ettArgs && ettArgs.synonym === 'true') {\n                        returnToken.synonym = t.value;\n                    }\n                    if (t.type === 'Slot') {\n                        if (def[innerEntityKey].args) {\n                            returnToken.args = def[innerEntityKey].args;\n                        }\n                        returnToken.value = returnToken.value.trim();\n                        returnToken.type = t.type;\n                        returnToken.slot = t.value;\n                    }\n                    accumulator = accumulator.concat(returnToken);\n                }\n            }\n        } else {\n            accumulator = accumulator.concat(t);\n        }\n    }\n    return accumulator;\n};\n\n/**\n * Picks the `combinationNumber`th example amongst all possible `entity` examples.\n *\n * @param defs All entities definitions\n * @param entity Entity to get the example from\n * @param combinationNumber The number of the example\n */\nexport const getExampleByNumber = (defs: IEntities, entity: IChatitoEntityAST, combinationNumber: number): ISentenceTokens[] => {\n    let lookupNumber = combinationNumber;\n    const sentence = entity.inner.find(s => {\n        if (lookupNumber < s.cardinality!) {\n            return true;\n        }\n        lookupNumber -= s.cardinality!;\n        return false;\n    });\n    if (!sentence) {\n        return [];\n    }\n    let prevCardinality = 1;\n    let prevRemaining = 0;\n    const isSlotDefSentenceWithOnlyOneAlias =\n        entity.type === 'SlotDefinition' && sentence.sentence.length === 1 && sentence.sentence[0].type === 'Alias';\n    const resultTokens = sentence.sentence.reduce(\n        (example, token) => {\n            if (token.type === 'Text') {\n                return example.concat([token]);\n            }\n            if (token.type === 'Slot' || token.type === 'Alias') {\n                let cardinality = token.opt ? 1 : 0;\n                const innerEntity = token.type === 'Alias' ? defs.Alias : defs.Slot;\n                const entityKey = getEntityKey(token);\n                cardinality += innerEntity[entityKey].cardinality!;\n                lookupNumber = (lookupNumber - prevRemaining) / prevCardinality;\n                prevRemaining = lookupNumber % cardinality;\n                prevCardinality = cardinality;\n                if (prevRemaining === 0 && token.opt) {\n                    return example;\n                }\n                const innerNumber = token.opt ? prevRemaining - 1 : prevRemaining;\n                let tokens = getExampleByNumber(defs, innerEntity[entityKey], innerNumber);\n                tokens = chatitoFormatPostProcess(tokens).map(t => {\n                    const ettArgs = innerEntity[entityKey].args;\n                    if (isSlotDefSentenceWithOnlyOneAlias && ettArgs && ettArgs.synonym === 'true') {\n                        t.synonym = token.value;\n                    }\n                    if (token.type === 'Slot') {\n                        if (innerEntity[entityKey].args) {\n                            t.args = innerEntity[entityKey].args;\n                        }\n                        t.value = t.value.trim();\n                        t.type = token.type;\n                        t.slot = token.value;\n                    }\n                    return t;\n                });\n                return example.concat(tokens);\n            }\n            throw Error(`Unknown token type: ${token.type}`);\n        },\n        [] as ISentenceTokens[]\n    );\n    return chatitoFormatPostProcess(resultTokens);\n};\n\n/**\n * Returns a generator providing every possible combination of entity's examples\n * including duplicates.\n *\n * @param defs All entities definitions\n * @param entity Entity to get all examples for\n */\nexport function* allExamplesGenerator(defs: IEntities, entity: IChatitoEntityAST) {\n    for (let i = 0; i < entity.cardinality!; i++) {\n        yield getExampleByNumber(defs, entity, i);\n    }\n}\n\n/**\n * Calculates the cardinality of the `sentence`.\n * All the entities used in the sentence must already have their cardinalities\n * calculated.\n *\n * @param defs All entities definitions\n * @param sentence Sentence tokens\n */\nconst getCardinality = (defs: IEntities, sentence: ISentenceTokens[]) => {\n    return sentence.reduce((acc, token) => {\n        if (token.type === 'Text') {\n            return acc;\n        }\n        const entity = token.type === 'Alias' ? defs.Alias : defs.Slot;\n        const entityKey = getEntityKey(token);\n\n        let tokenCardinality = entity[entityKey].cardinality!;\n        if (token.opt) {\n            tokenCardinality += 1;\n        }\n        return acc * tokenCardinality;\n    }, 1);\n};\n\n/**\n * Calculates the cardinality of the `entity`.\n * All the entities used in the entity must already have their cardinalities\n * calculated.\n *\n * @param defs All entities definitions\n * @param entity Entity to calc cardinality for\n */\nconst calcCardinality = (defs: IEntities, entity: IChatitoEntityAST) => {\n    entity.inner.forEach(sentence => {\n        const cardinality = getCardinality(defs, sentence.sentence);\n        sentence.cardinality = cardinality;\n    });\n    entity.cardinality = entity.inner.reduce((acc, sentence) => acc + sentence.cardinality!, 0);\n};\n\n/**\n * Returns human readable string representing an entity.\n * Returns the same string for entity definition and it's use in a token.\n *\n * @param item Token or Entity definition\n */\nconst getRefKey = (item: IChatitoEntityAST | ISentenceTokens) => {\n    const type = item.type.replace('Definition', '');\n    const key = 'key' in item ? item.key : getEntityKey(item);\n    switch (type) {\n        case 'Intent':\n            return `%[${key}]`;\n        case 'Alias':\n            return `~[${key}]`;\n        case 'Slot':\n            return `@[${key}]`;\n\n        default:\n            return `(${key})`;\n    }\n};\n\n/**\n * Returns true if the `entity` has any entity with cardinality not yet being\n * calculated.\n * Also populates `refs` map.\n *\n * @param defs All entities definitions\n * @param entity An Entity\n * @param refs A map of entities references\n */\nconst hasTokenWithoutCardinality = (defs: IEntities, entity: IChatitoEntityAST, refs: { [key: string]: Set<string> }) => {\n    const parentKey = getRefKey(entity);\n    return entity.inner.some(sentence =>\n        sentence.sentence.some(token => {\n            if (token.type === 'Text') {\n                return false;\n            }\n            const entityKey = getEntityKey(token);\n            const refKey = getRefKey(token);\n            if (refKey in refs) {\n                refs[refKey].add(parentKey);\n            } else {\n                refs[refKey] = new Set([parentKey]);\n            }\n            if (!defs[token.type][entityKey]) {\n                throw new Error(`${token.type} not defined: ${entityKey}`);\n            }\n            return defs[token.type][entityKey].cardinality === undefined;\n        })\n    );\n};\n\n/**\n * Throws an error showing loop path if there is any in entities references (`refs`)\n * starting with `path` path.\n *\n * @param path Current path\n * @param refs Entities references map\n */\nconst checkLoopIn = (path: string[], refs: { [key: string]: Set<string> }) => {\n    const last = path[path.length - 1];\n    if (refs[last]) {\n        for (const parent of refs[last]) {\n            if (parent === path[0]) {\n                const loop = path.concat([parent]).reverse();\n                throw new Error(`You have a circular nesting: ${loop.join(' -> ')}. Infinite loop prevented.`);\n            } else {\n                checkLoopIn(path.concat([parent]), refs);\n            }\n        }\n    }\n};\n\n/**\n * Throws an error showing loop path if there is any in entities references (`refs`)\n *\n * @param refs Entities references map\n */\nconst checkLoop = (refs: { [key: string]: Set<string> }) => {\n    for (const key of Object.keys(refs)) {\n        const path = [key];\n        checkLoopIn(path, refs);\n    }\n};\n\n/**\n * Throws an error showing slots nesting path if there is any\n * in the entitiesreferences (`refs`) starting with `path` path.\n *\n * @param path Current path\n * @param refs Entities references map\n */\nconst findNestedSlots = (path: string[], refs: { [key: string]: Set<string> }) => {\n    const last = path[path.length - 1];\n    if (refs[last]) {\n        for (const parent of refs[last]) {\n            const firstIndex = path.findIndex(item => item.startsWith('@'));\n            if (firstIndex !== -1 && parent.startsWith('@')) {\n                const slotsPath = path\n                    .slice(firstIndex)\n                    .reverse()\n                    .join(' -> ');\n                throw new Error(`You have nested slots: ${parent} -> ${slotsPath}. A slot can't reference other slot.`);\n            } else {\n                findNestedSlots(path.concat([parent]), refs);\n            }\n        }\n    }\n};\n\n/**\n * Throws an error showing slots nesting path if there is any\n * in the entitiesreferences (`refs`).\n *\n * @param refs Entities references map\n */\nconst checkNestedSlots = (refs: { [key: string]: Set<string> }) => {\n    for (const key of Object.keys(refs)) {\n        const path = [key];\n        findNestedSlots(path, refs);\n    }\n};\n\n/**\n * Calculates cardinalities for all entities.\n * Also checks for nested slots.\n *\n * @param defs All entities definitions\n */\nconst preCalcCardinality = (defs: IEntities) => {\n    // cycle through uncalculated:\n    const uncalced = {\n        Intent: [] as string[],\n        Alias: [] as string[],\n        Slot: [] as string[]\n    };\n    const refs: { [key: string]: Set<string> } = {};\n    let totalUncalced = 0;\n    let lastUncalced = -1;\n    do {\n        totalUncalced = 0;\n        for (const type of Object.keys(uncalced) as Array<keyof typeof uncalced>) {\n            uncalced[type] = Object.keys(defs[type]).filter(key => defs[type][key].cardinality === undefined);\n            uncalced[type].forEach(key => {\n                if (!hasTokenWithoutCardinality(defs, defs[type][key], refs)) {\n                    calcCardinality(defs, defs[type][key]);\n                } else {\n                    totalUncalced += 1;\n                }\n            });\n        }\n        if (lastUncalced === totalUncalced) {\n            checkLoop(refs);\n        }\n        lastUncalced = totalUncalced;\n    } while (totalUncalced > 0);\n    checkNestedSlots(refs);\n};\n\n/**\n * Adds missing alias definitions.\n * When alias is used in sentence tokens but not defined.\n *\n * @param defs All entities definitions\n */\nconst addMissingAliases = (defs: IEntities) => {\n    const aliases = new Set<string>();\n    for (const entities of [defs.Alias, defs.Slot, defs.Intent]) {\n        for (const key of Object.keys(entities)) {\n            entities[key].inner.forEach(sentence => {\n                sentence.sentence.forEach(token => {\n                    if (token.type === 'Alias') {\n                        aliases.add(token.value);\n                    }\n                });\n            });\n        }\n    }\n    for (const alias of aliases) {\n        if (!defs.Alias[alias]) {\n            defs.Alias[alias] = {\n                inner: [{ sentence: [{ value: alias, type: 'Text' }], probability: null }],\n                key: alias,\n                type: 'AliasDefinition'\n            };\n        }\n    }\n};\n\nexport type IFileImporter = (\n    fromPath: string,\n    importFile: string\n) => {\n    filePath: string;\n    dsl: string;\n};\n\nexport const astFromString = (str: string) => chatito.parse(str);\nexport const datasetFromString = (str: string, writterFn: IUtteranceWriter, importer?: IFileImporter, currentPath?: string) => {\n    const ast = astFromString(str);\n    return datasetFromAST(ast, writterFn, importer, currentPath);\n};\n\nexport const getImports = (from: string, to: string, importer: IFileImporter) => {\n    const fileContent = importer(from, to);\n    if (!fileContent || !fileContent.dsl) {\n        throw new Error(`Failed importing ${to}`);\n    }\n    try {\n        const importAst = astFromString(fileContent.dsl);\n        let outAst: IChatitoEntityAST[] = [];\n        importAst.forEach(ett => {\n            if (ett.type === 'ImportFile' && ett.value) {\n                outAst = [...outAst, ...getImports(fileContent.filePath, ett.value, importer)];\n            } else if (ett.type === 'AliasDefinition' || ett.type === 'SlotDefinition') {\n                outAst = [...outAst, ett];\n            }\n        });\n        return outAst;\n    } catch (e) {\n        throw new Error(`Failed importing ${to}. ${e.message} - ${JSON.stringify(e.location)}`);\n    }\n};\n\nexport const definitionsFromAST = (initialAst: IChatitoEntityAST[], importHandler?: IFileImporter, currPath?: string) => {\n    const operatorDefinitions: IEntities = { Intent: {}, Slot: {}, Alias: {} };\n    if (!initialAst || !initialAst.length) {\n        return;\n    }\n    const importer = importHandler ? importHandler : () => ({ filePath: '', dsl: '' });\n    const currentPath = currPath ? currPath : '';\n    // gete imports first\n    let ast: IChatitoEntityAST[] = [...initialAst];\n    initialAst.forEach(od => {\n        if (od.type === 'ImportFile' && od.value) {\n            ast = [...ast, ...getImports(currentPath, od.value, importer)];\n        }\n    });\n    ast.forEach(od => {\n        let entity: IEntityDef;\n        if (od.type === 'IntentDefinition') {\n            entity = operatorDefinitions.Intent;\n        } else if (od.type === 'SlotDefinition') {\n            entity = operatorDefinitions.Slot;\n        } else if (od.type === 'AliasDefinition') {\n            entity = operatorDefinitions.Alias;\n        } else {\n            // type is 'Comment' or 'ImportFile'\n            return; // skip comments\n        }\n        const odKey = od.variation ? `${od.key}#${od.variation}` : od.key;\n        if (entity[odKey]) {\n            throw new Error(`Duplicate definition for ${od.type} '${odKey}'`);\n        }\n        entity[odKey] = od;\n    });\n    addMissingAliases(operatorDefinitions);\n    preCalcCardinality(operatorDefinitions);\n    return operatorDefinitions;\n};\n\nexport const datasetFromAST = async (\n    initialAst: IChatitoEntityAST[],\n    writterFn: IUtteranceWriter,\n    importHandler?: IFileImporter,\n    currPath?: string\n) => {\n    const operatorDefinitions = definitionsFromAST(initialAst, importHandler, currPath);\n    if (!operatorDefinitions) {\n        return;\n    }\n    const intentKeys = Object.keys(operatorDefinitions.Intent);\n    if (!intentKeys || !intentKeys.length) {\n        return;\n    }\n    for (const intentKey of intentKeys) {\n        // and for all tokens inside the sentence\n        const maxPossibleCombinations = operatorDefinitions.Intent[intentKey].cardinality!;\n        let maxIntentExamples = maxPossibleCombinations; // counter that will change\n        const entityArgs = operatorDefinitions.Intent[intentKey].args;\n        // by default if no training or testing arguments are declared, all go to training\n        let trainingN = maxIntentExamples;\n        let testingN = 0;\n        let generatedTrainingExamplesCount = 0;\n        let generatedTestingExamplesCount = 0;\n        if (entityArgs) {\n            if (entityArgs.training) {\n                trainingN = parseInt(entityArgs.training, 10);\n                if (trainingN < 1) {\n                    throw new Error(`The 'training' argument for ${intentKey} must be higher than 0.`);\n                }\n                if (entityArgs.testing) {\n                    testingN = parseInt(entityArgs.testing, 10);\n                    if (testingN < 1) {\n                        throw new Error(`The 'testing' argument for ${intentKey} must be higher than 0.`);\n                    }\n                }\n            }\n            let intentMax = trainingN + testingN;\n            if (intentMax > maxIntentExamples) {\n                logger.warn(\n                    `Can't generate ${intentMax} examples. ` +\n                        `Using the maximum possible combinations: ${maxIntentExamples}. ` +\n                        'NOTE: Using the maximum leads to overfitting.'\n                );\n                intentMax = maxIntentExamples;\n            } else if (intentMax < maxIntentExamples) {\n                maxIntentExamples = intentMax;\n            }\n        }\n        const maxEx = maxIntentExamples;\n        const globalCache: IChatitoCache = new Map();\n        const collitionsCache: { [id: string]: boolean } = {};\n        if (maxIntentExamples >= maxPossibleCombinations) {\n            for (const utterance of allExamplesGenerator(operatorDefinitions, operatorDefinitions.Intent[intentKey])) {\n                const utteranceString = utterance.reduce((p, n) => p + n.value, '');\n                if (!collitionsCache[utteranceString]) {\n                    collitionsCache[utteranceString] = true;\n                    const completedTraining = generatedTrainingExamplesCount >= trainingN;\n                    const completedTesting = generatedTestingExamplesCount >= testingN;\n                    let isTrainingExample = !completedTraining;\n                    if (!completedTraining && !completedTesting) {\n                        const trainingLeft = trainingN - generatedTrainingExamplesCount;\n                        const testingLeft = testingN - generatedTestingExamplesCount;\n                        isTrainingExample = Math.random() < trainingLeft / (trainingLeft + testingLeft);\n                    }\n                    writterFn(utterance, intentKey, isTrainingExample);\n                    if (isTrainingExample) {\n                        generatedTrainingExamplesCount++;\n                    } else {\n                        generatedTestingExamplesCount++;\n                    }\n                }\n            }\n            continue;\n        }\n        let duplicatesCounter = 0;\n        while (maxIntentExamples) {\n            const intentSentence = await getVariationsFromEntity(\n                operatorDefinitions.Intent[intentKey],\n                operatorDefinitions,\n                false,\n                globalCache\n            );\n            const utterance = chatitoFormatPostProcess(intentSentence);\n            const utteranceString = utterance.reduce((p, n) => p + n.value, '');\n            if (!collitionsCache[utteranceString]) {\n                collitionsCache[utteranceString] = true;\n                const completedTraining = generatedTrainingExamplesCount >= trainingN;\n                const completedTesting = generatedTestingExamplesCount >= testingN;\n                let isTrainingExample = !completedTraining;\n                if (!completedTraining && !completedTesting) {\n                    // reference: https://stackoverflow.com/questions/44263229/generate-a-random-boolean-70-true-30-false\n                    isTrainingExample = Math.random() < 0.7;\n                }\n                writterFn(utterance, intentKey, isTrainingExample);\n                maxIntentExamples--;\n                if (isTrainingExample) {\n                    generatedTrainingExamplesCount++;\n                } else {\n                    generatedTestingExamplesCount++;\n                }\n            } else {\n                duplicatesCounter++;\n                // note: trick to make all combinations for small datasets, but avoid them for large ones\n                const smallDupesLimit = 10000;\n                const maxDupes = maxPossibleCombinations * maxPossibleCombinations;\n                const maxDupesLimit = Math.floor(maxDupes / 2);\n                const isBigDataset = maxPossibleCombinations > smallDupesLimit;\n                if (\n                    (isBigDataset && duplicatesCounter > maxDupesLimit) ||\n                    (!isBigDataset && duplicatesCounter > maxDupes * maxPossibleCombinations)\n                ) {\n                    // prevent cases where duplicates are part of the entity definitions\n                    let m = `Too many duplicates while generating dataset! Looks like we have probably reached `;\n                    m += `the maximum ammount of possible unique generated examples. `;\n                    m += `The generator has stopped at ${maxEx - maxIntentExamples} examples for intent ${intentKey}.`;\n                    logger.warn(m);\n                    maxIntentExamples = 0;\n                }\n            }\n        }\n    }\n};\n","// Deep merge objects\n// https://gist.github.com/Salakar/1d7137de9cb8b704e48a\nconst isObject = (item: any) => item && typeof item === 'object' && !Array.isArray(item) && item !== null;\nconst isArray = (item: any) => {\n    if (typeof Array.isArray === 'undefined') {\n        return Object.prototype.toString.call(item) === '[object Array]';\n    } else {\n        return Array.isArray(item);\n    }\n};\nexport const mergeDeep = <T>(target: any, source: any): T => {\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(key => {\n            if (isArray(source[key])) {\n                if (target[key] === undefined) {\n                    target[key] = [];\n                }\n                target[key] = target[key].concat(source[key]);\n            } else if (isObject(source[key])) {\n                if (!target[key]) {\n                    Object.assign(target, { [key]: {} });\n                }\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n    }\n    return target;\n};\n","import * as gen from '../main';\nimport { ISentenceTokens } from '../types';\nimport * as utils from '../utils';\n\nexport interface ILuisEntityLabel {\n    startCharIndex: number;\n    endCharIndex: number;\n    entityName: string;\n}\nexport interface ILuisExample {\n    text: string;\n    intentName: string;\n    entityLabels: ILuisEntityLabel[];\n}\nexport interface ILuisDataset {\n    data: ILuisExample[];\n}\n\nexport interface ILuisTestingDataset {\n    [intent: string]: ISentenceTokens[][];\n}\n\nexport async function adapter(dsl: string, formatOptions?: any, importer?: gen.IFileImporter, currentPath?: string) {\n    const training: ILuisDataset = { data: [] };\n    const testing: ILuisDataset = { data: [] };\n    if (formatOptions) {\n        utils.mergeDeep(training, formatOptions);\n    }\n    const utteranceWriter = (utterance: ISentenceTokens[], intentKey: string, isTrainingExample: boolean) => {\n        const example = utterance.reduce(\n            (acc, next) => {\n                if (next.type === 'Slot' && next.slot) {\n                    acc.entityLabels.push({\n                        endCharIndex: acc.text.length + next.value.length,\n                        entityName: next.slot,\n                        startCharIndex: acc.text.length\n                    });\n                }\n                acc.text += next.value;\n                return acc;\n            },\n            { text: '', intentName: intentKey, entityLabels: [] } as ILuisExample\n        );\n        if (isTrainingExample) {\n            training.data.push(example);\n        } else {\n            testing.data.push(example);\n        }\n    };\n    await gen.datasetFromString(dsl, utteranceWriter, importer, currentPath);\n    return { training, testing };\n}\n","import * as gen from '../main';\nimport { ISentenceTokens } from '../types';\nimport * as utils from '../utils';\n\nexport interface IRasaEntity {\n    start: number;\n    end: number;\n    value: string;\n    entity: string;\n}\nexport interface IRasaExample {\n    text: string;\n    intent: string;\n    entities: IRasaEntity[];\n}\nexport interface IRasaDataset {\n    rasa_nlu_data: {\n        regex_features: any[];\n        entity_synonyms: Array<{ value: string; synonyms: string[] }>;\n        common_examples: IRasaExample[];\n    };\n}\n\nexport interface IRasaTestingDataset {\n    [intent: string]: ISentenceTokens[][];\n}\n\nexport async function adapter(dsl: string, formatOptions?: any, importer?: gen.IFileImporter, currentPath?: string) {\n    const training: IRasaDataset = {\n        rasa_nlu_data: {\n            regex_features: [],\n            entity_synonyms: [],\n            common_examples: []\n        }\n    };\n    const testing = { rasa_nlu_data: { common_examples: [] as IRasaExample[] } };\n    const synonyms: { [key: string]: Set<string> } = {};\n    if (formatOptions) {\n        utils.mergeDeep(training, formatOptions);\n    }\n    const utteranceWriter = (utterance: ISentenceTokens[], intentKey: string, isTrainingExample: boolean) => {\n        const example = utterance.reduce(\n            (acc, next) => {\n                if (next.type === 'Slot' && next.slot) {\n                    if (next.synonym) {\n                        if (!synonyms[next.synonym]) {\n                            synonyms[next.synonym] = new Set();\n                        }\n                        if (next.synonym !== next.value) {\n                            synonyms[next.synonym].add(next.value);\n                        }\n                    }\n                    acc.entities.push({\n                        end: acc.text.length + next.value.length,\n                        entity: next.slot,\n                        start: acc.text.length,\n                        value: next.synonym ? next.synonym : next.value\n                    });\n                }\n                acc.text += next.value;\n                return acc;\n            },\n            { text: '', intent: intentKey, entities: [] } as IRasaExample\n        );\n        if (isTrainingExample) {\n            training.rasa_nlu_data.common_examples.push(example);\n        } else {\n            testing.rasa_nlu_data.common_examples.push(example);\n        }\n    };\n    await gen.datasetFromString(dsl, utteranceWriter, importer, currentPath);\n    Object.keys(synonyms).forEach(k => {\n        training.rasa_nlu_data.entity_synonyms.push({\n            synonyms: Array.from(synonyms[k]),\n            value: k\n        });\n    });\n    return { training, testing };\n}\n","import * as gen from '../main';\nimport { ISentenceTokens } from '../types';\nimport * as utils from '../utils';\n\nexport interface ISnipsUtteranceData {\n    text: string;\n    entity?: string;\n    slot_name?: string;\n}\nexport interface ISnipsUtterance {\n    data: ISnipsUtteranceData[];\n}\nexport interface ISnipsIntent {\n    utterances: ISnipsUtterance[];\n}\nexport interface ISnipsDataset {\n    intents: { [intentKey: string]: ISnipsIntent };\n    entities: {\n        [entityKey: string]: {\n            data?: Array<{ value: string; synonyms: string[] }>;\n            use_synonyms?: boolean;\n            automatically_extensible?: boolean;\n        };\n    };\n    language: string;\n}\n\nexport interface ISnipsTestingDataset {\n    [intent: string]: ISentenceTokens[][];\n}\n\nexport async function adapter(dsl: string, formatOptions?: any, importer?: gen.IFileImporter, currentPath?: string) {\n    const training: ISnipsDataset = { language: 'en', entities: {}, intents: {} };\n    const testing: ISnipsTestingDataset = {};\n    if (formatOptions) {\n        utils.mergeDeep(training, formatOptions);\n    }\n    const synonymsForSlots: {\n        [slot: string]: { [key: string]: Set<string> };\n    } = {};\n    // const slots: Set<string> = new Set();\n    const entities: Set<string> = new Set();\n    const utteranceWriter = (utterance: ISentenceTokens[], intentKey: string, isTrainingExample: boolean) => {\n        if (isTrainingExample) {\n            if (!training.intents[intentKey]) {\n                training.intents[intentKey] = { utterances: [] };\n            }\n            const data = utterance.map(u => {\n                const ret: ISnipsUtteranceData = { text: u.value };\n                if (u.type === 'Slot' && u.slot) {\n                    ret.slot_name = u.slot;\n                    if (u.args) {\n                        Object.keys(u.args).forEach(key => {\n                            if (u.args && key === 'entity') {\n                                entities.add(u.args[key]);\n                                ret.entity = u.args[key];\n                            }\n                        });\n                    }\n                    if (!ret.entity) {\n                        ret.entity = u.slot;\n                        entities.add(u.slot);\n                    }\n                    if (u.synonym && ret.entity) {\n                        if (!synonymsForSlots[ret.entity]) {\n                            synonymsForSlots[ret.entity] = {};\n                        }\n                        const synonyms = synonymsForSlots[ret.entity];\n                        if (!synonyms[u.synonym]) {\n                            synonyms[u.synonym] = new Set();\n                        }\n                        if (u.synonym !== u.value) {\n                            synonyms[u.synonym].add(u.value);\n                        }\n                    }\n                }\n                return ret;\n            });\n            training.intents[intentKey].utterances.push({ data });\n        } else {\n            if (!testing[intentKey]) {\n                testing[intentKey] = [];\n            }\n            testing[intentKey].push(utterance);\n        }\n    };\n    await gen.datasetFromString(dsl, utteranceWriter, importer, currentPath);\n    entities.forEach(slotKey => {\n        if (!synonymsForSlots[slotKey]) {\n            if (!training.entities[slotKey]) {\n                training.entities[slotKey] = {};\n            }\n            return;\n        }\n        Object.keys(synonymsForSlots[slotKey]).forEach(synonymsValue => {\n            if (!training.entities[slotKey]) {\n                training.entities[slotKey] = {};\n            }\n            training.entities[slotKey].use_synonyms = true;\n            training.entities[slotKey].automatically_extensible = true;\n            if (!training.entities[slotKey].data) {\n                training.entities[slotKey].data = [];\n            }\n            const slotSynonymsSet = synonymsForSlots[slotKey][synonymsValue];\n            const synonymsList = slotSynonymsSet.size ? Array.from(slotSynonymsSet) : [];\n            (training.entities[slotKey].data as any[]).push({\n                synonyms: synonymsList,\n                value: synonymsValue\n            });\n        });\n    });\n    return { training, testing };\n}\n","import * as gen from '../main';\nimport { ISentenceTokens } from '../types';\nimport * as utils from '../utils';\n\nexport interface IDefaultDataset {\n    [intent: string]: ISentenceTokens[][];\n}\nexport async function adapter(dsl: string, formatOptions?: any, importer?: gen.IFileImporter, currentPath?: string) {\n    const training: IDefaultDataset = {};\n    const testing: IDefaultDataset = {};\n    if (formatOptions) {\n        utils.mergeDeep(training, formatOptions);\n    }\n    const utteranceWriter = (utterance: ISentenceTokens[], intentKey: string, isTrainingExample: boolean) => {\n        const dataset = isTrainingExample ? training : testing;\n        if (!dataset[intentKey]) {\n            dataset[intentKey] = [];\n        }\n        dataset[intentKey].push(utterance);\n    };\n    await gen.datasetFromString(dsl, utteranceWriter, importer, currentPath);\n    return { training, testing };\n}\n","import * as rasaAdapter from '../../src/adapters/rasa';\nimport * as snipsAdapter from '../../src/adapters/snips';\nimport * as webAdapter from '../../src/adapters/web';\n\nconst findRestaurantsByCity = `import ./common.chatito\n\n# Ways to request a restaurant within a location (using probability operator)\n# NOTE: 60% of the examples should come from the first sentence, and 40% from the second\n\n%[findRestaurantsByCity]('training': '100', 'testing': '100')\n    *[60%] ~[hi?] ~[please?] ~[find?] ~[restaurants] ~[located at] @[city] ~[city?] ~[thanks?]\n    *[40%] ~[restaurants] ~[located at] @[city]\n\n@[city]\n    ~[new york]\n    ~[san francisco]\n    ~[atlanta]\n\n~[find]\n    find\n    i'm looking for\n    help me find\n\n~[located at]\n    located at\n    in the area of\n    near\n\n~[restaurants]\n    restaurants\n    places to eat\n    where to eat\n`;\n\nconst affirmative = `// Ways to say yes\n\nimport ./common.chatito\n\n%[affirmative]('training': '50', 'testing': '50')\n    *[20%] ~[yes]\n    ~[yes] ~[please?]\n    ~[yes] ~[yes?] ~[thanks?]\n    ~[yes?] ~[that is good] ~[yes?]\n\n~[yes]\n    yes\n    right\n    affirmative\n    agreed\n    correct\n    yep\n    yes sir\n    sounds good\n    im ok with that\n\n~[that is good]\n    that is good\n    i want that\n    that is fine\n    that is correct\n    that is what i want\n    you understood me\n    that is right\n    its fine\n    good\n`;\n\nconst bye = `// Ways to say goodbye\n\nimport ./common.chatito\n\n%[bye]('training': '50', 'testing': '50')\n    *[20%] ~[bye]\n    ~[thanks?] ~[bye]\n    ~[bye] ~[thanks?]\n    ~[leaving]\n    ~[leaving] ~[bye]\n\n~[bye]\n    bye\n    goodbye\n    ttyl\n    gtg\n    adios\n    farewell\n    adieu\n    chao\n    chau\n\n~[leaving]\n    leaving\n    talk to you soon\n    have to go\n    got to go\n    talk to you later\n    heading out\n    im leaving now\n    going out\n`;\n\nconst greet = `// Ways to say hello\n\nimport ./common.chatito\n\n%[greet]('training': '50', 'testing': '50')\n    *[20%] ~[hi]\n    ~[greetings]\n    ~[hi] ~[greetings?]\n    ~[hi] ~[whats up]\n    ~[greetings] ~[whats up]\n    ~[hi] ~[greetings] ~[whats up]\n\n~[greetings]\n    greetings\n    good morning\n    good afternoon\n    good day\n    good night\n    morning\n\n~[whats up]\n    how are you\n    whats up\n    how are you doing\n    how is it going\n    are you there\n    how are things going\n    are you around\n    whatsup\n    sup\n    are you around?\n`;\n\nconst negative = `// Ways to say no\n\nimport ./common.chatito\n\n%[negative]('training': '50', 'testing': '50')\n    *[20%] ~[no]\n    ~[no] ~[please?] ~[its not ok?]\n    ~[please?] ~[no] ~[its not ok?]\n    *[20%] ~[its not ok]\n\n~[no]\n    no\n    nope\n    not really\n    that's not right\n    incorrect\n    don't do that\n\n~[its not ok]\n    i don't want that\n    didnt meant that\n    dont mean that\n    that's not what i want\n    that's not correct\n    that's wrong\n    it's not good\n    that is wrong\n    its not ok\n    its not correct\n`;\n\nconst common = `// Common entities to be imported and reused\n~[hi]\n    hi\n    hello\n    hey\n\n~[please]\n    please\n    plz\n    pls\n\n~[thanks]\n    thanks\n    thank you\n\n`;\n\nexport const tabs = [\n    { title: 'findRestaurantsByCity.chatito', value: findRestaurantsByCity },\n    { title: 'greet.chatito', value: greet },\n    { title: 'bye.chatito', value: bye },\n    { title: 'affirmative.chatito', value: affirmative },\n    { title: 'negative.chatito', value: negative },\n    { title: 'common.chatito', value: common }\n];\n\nexport const chatitoPrism = {\n    comments: [{ pattern: /^(\\/\\/|\\#).*/, greedy: true }, { pattern: /((\\n|\\r\\n)+)(\\/\\/|\\#).*/, greedy: true }],\n    imports: [{ pattern: /(\\n|\\r\\n)import\\s/, greedy: true }, { pattern: /^import\\s/, greedy: true }],\n    intentDefinition: [\n        {\n            pattern: /^%\\[[^\\]]+\\]((\\(.+\\))?)/,\n            inside: { intentArguments: /((\\(.+\\))?)$/ }\n        },\n        {\n            pattern: /((\\n|\\r\\n)+)%\\[[^\\]]+\\]((\\(.+\\))?)/,\n            inside: { intentArguments: /((\\(.+\\))?)$/ }\n        }\n    ],\n    slotDefinition: [\n        {\n            pattern: /^\\@\\[[^\\]]+\\]((\\(.+\\))?)/,\n            inside: { slotArguments: /((\\(.+\\))?)$/ }\n        },\n        {\n            pattern: /((\\n|\\r\\n)+)\\@\\[[^\\]]+\\]((\\(.+\\))?)/,\n            inside: { slotArguments: /((\\(.+\\))?)$/ }\n        }\n    ],\n    aliasDefinition: [\n        {\n            pattern: /^~\\[[^\\]]+\\]((\\(.+\\))?)/,\n            inside: { aliasArguments: /((\\(.+\\))?)$/ }\n        },\n        {\n            pattern: /((\\n|\\r\\n)+)~\\[[^\\]]+\\]((\\(.+\\))?)/,\n            inside: { aliasArguments: /((\\(.+\\))?)$/ }\n        }\n    ],\n    probability: { pattern: /(\\n|\\r\\n)\\s\\s\\s\\s\\*\\[[^\\]]+\\]/, greedy: true },\n    slot: { pattern: /\\@\\[[^\\]]+(\\?)?\\]/, greedy: true },\n    alias: { pattern: /~\\[[^\\]]+(\\?)?\\]/, greedy: true },\n    default: { pattern: /[^\\r\\n]/i, greedy: true }\n};\n\nexport const webDefaultOptions: webAdapter.IDefaultDataset = {};\nexport const rasaDefaultOptions: rasaAdapter.IRasaDataset = {\n    rasa_nlu_data: {\n        regex_features: [],\n        entity_synonyms: [],\n        common_examples: []\n    }\n};\nexport const snipsDefaultOptions: snipsAdapter.ISnipsDataset = { language: 'en', entities: {}, intents: {} };\n","import styled from 'styled-components';\n\nexport const AlertNotification = styled('div')`\n    width: 100%;\n    background-color: ${({ state }: { state: 'error' | 'warning' | 'success' }) =>\n        state === 'error' ? '#c80000' : state === 'warning' ? '#7f8000' : '#008800'};\n    bottom: 0;\n    margin: auto;\n    right: 0;\n    text-align: center;\n    padding: 12px;\n    color: white;\n    z-index: 99;\n    font-size: 14px;\n`;\n\nexport const CodeStyles = styled('div')`\n    white-space: pre-wrap;\n    position: relative;\n    margin: auto;\n    width: inherit;\n    height: calc(100vh - 210px) !important;\n    min-height: 400px;\n    background-color: #282a35;\n    > .codeflask {\n        background-color: #282a35;\n        > textarea.codeflask__textarea {\n            color: #282a35;\n            caret-color: #fff;\n        }\n        &.codeflask--has-line-numbers {\n            :before {\n                background-color: #3c3c4c;\n            }\n            > pre {\n                width: auto !important;\n            }\n            div.codeflask__lines {\n                z-index: 3;\n                height: auto !important;\n                padding: 10px 4px 0 0;\n                > .codeflask__lines__line {\n                    color: #6473a0;\n                    background-color: #3c3c4c;\n                }\n            }\n        }\n        *::-webkit-scrollbar {\n            width: 10px;\n            height: 10px;\n        }\n        *::-webkit-scrollbar-thumb {\n            background-color: #7c7c9c;\n            box-shadow: inset 0 0 2px rgba(0, 0, 0, 0.8);\n        }\n        *::-webkit-scrollbar-track {\n            box-shadow: inset 0 0 2px rgba(0, 0, 0, 0.8);\n        }\n        *::-webkit-scrollbar-corner {\n            background-color: transparent;\n        }\n    }\n    .token.imports {\n        color: #f7717d;\n    }\n    .token.comments {\n        color: #999;\n    }\n    .token.intentDefinition {\n        color: #ef82c3;\n    }\n    .token.slotDefinition {\n        color: #ffaf56;\n    }\n    .token.aliasDefinition {\n        color: #a0e7fb;\n    }\n    .token.probability {\n        color: #00f0b5;\n    }\n    .token.slot {\n        color: #ffaf56;\n    }\n    .token.alias {\n        color: #a0e7fb;\n    }\n    .token.default {\n        color: #e2e2dd;\n    }\n    .token.intentArguments {\n        color: #b5669e;\n    }\n    .token.slotArguments {\n        color: #7a9d98;\n    }\n    .token.aliasArguments {\n        color: #80c7db;\n    }\n`;\n\nexport const TabButton = styled('div')`\n    cursor: pointer;\n    display: inline-block;\n    background-color: ${({ active }: { active: boolean }) => (active ? '#282A35' : '#3c3c4c')};\n    font-size: 12px;\n    color: #ededed;\n    padding: 13px 3px 13px 13px;\n    border-right: 1px solid #2c2c3c;\n    zoom: 1;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n`;\n\nexport const CloseTab = styled('div')`\n    :after {\n        content: 'x';\n    }\n    padding: 8px;\n    margin-left: 8px;\n    display: inline-block;\n    color: #ccf;\n    line-height: 10px;\n    font-size: 14px;\n    cursor: pointer;\n    font-weight: bold;\n`;\n\nexport const EditorHeader = styled('div')`\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    max-width: 100%;\n    background-color: #3c3c4c;\n    padding-left: 40px;\n    padding-top: 10px;\n`;\n\nexport const TabsAreaButton = styled('button')`\n    cursor: pointer;\n    background-color: #6c1de2;\n    font-size: 12px;\n    color: #efefef;\n    line-height: 14px;\n    padding: 8px 24px;\n    white-space: nowrap;\n    margin: auto 10px;\n    border-radius: 4px;\n    border-color: #333;\n    -webkit-transition: 0.25s ease;\n    -moz-transition: 0.25s ease;\n    -o-transition: 0.25s ease;\n    transition: 0.25s ease;\n    &:first-of-type {\n        margin-left: 20px;\n    }\n    :disabled {\n        border: 1px solid #999999;\n        background-color: #cccccc;\n        color: #666666;\n    }\n`;\n\nexport const TabsArea = styled('div')`\n    width: auto;\n    max-width: 100%;\n    white-space: nowrap;\n    position: relative;\n    overflow-x: auto;\n    overflow-y: hidden;\n    -webkit-overflow-scrolling: touch;\n    &::-webkit-scrollbar {\n        height: 6px;\n    }\n    &::-webkit-scrollbar-thumb {\n        background-color: #7c7c9c;\n        -webkit-box-shadow: inset 0 0 2px rgba(0, 0, 0, 0.8);\n    }\n    &::-webkit-scrollbar-track {\n        -webkit-box-shadow: inset 0 0 2px rgba(0, 0, 0, 0.8);\n    }\n    *::-webkit-scrollbar-corner {\n        background-color: transparent;\n    }\n`;\n\nexport const EditorWrapper = styled('div')`\n    width: 90vw;\n    overflow: auto;\n    margin: auto;\n    position: relative;\n    -webkit-box-shadow: 0px 0px 36px 2px rgba(0, 0, 0, 0.63);\n    -moz-box-shadow: 0px 0px 36px 2px rgba(0, 0, 0, 0.63);\n    box-shadow: 0px 0px 36px 2px rgba(0, 0, 0, 0.63);\n`;\n\nexport const Drawer = styled('div')`\n    z-index: 99;\n    position: absolute;\n    background-color: #352252;\n    -webkit-box-shadow: -5px 0px 5px -5px rgba(0, 0, 0, 0.55);\n    -moz-box-shadow: -5px 0px 5px -5px rgba(0, 0, 0, 0.55);\n    box-shadow: -5px 0px 5px -5px rgba(0, 0, 0, 0.55);\n    top: 0;\n    right: 0;\n    max-width: 700px;\n    height: 100%;\n    width: ${({ showDrawer }: { showDrawer: boolean }) => (showDrawer ? `100%` : `0px`)};\n    -webkit-transition: 0.65s ease;\n    -moz-transition: 0.65s ease;\n    -o-transition: 0.65s ease;\n    transition: 0.65s ease;\n    overflow: auto;\n`;\n\nexport const EditorOverlay = styled('div')`\n    z-index: 999;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.6);\n    visibility: ${({ showDrawer }: { showDrawer: boolean }) => (showDrawer ? 'visible' : 'hidden')};\n    -webkit-transition: 0.25s ease;\n    -moz-transition: 0.25s ease;\n    -o-transition: 0.25s ease;\n    transition: 0.25s ease;\n`;\n\nexport const BlockWrapper = styled('div')`\n    background-color: #e4e4e4;\n    margin: 20px;\n    overflow: auto;\n    border-radius: 8px;\n    -webkit-box-shadow: 0px 0px 50px 0px rgba(0, 0, 0, 0.4);\n    -moz-box-shadow: 0px 0px 50px 0px rgba(0, 0, 0, 0.4);\n    box-shadow: 0px 0px 50px 0px rgba(0, 0, 0, 0.4);\n    clear: both;\n`;\n\nexport const BlockWrapperTitle = styled('div')`\n    background-color: #6b5a86;\n    color: #efefef;\n    font-size: 13px;\n    padding: 8px 10px;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n`;\n\nexport const CloseDrawerButton = styled('div')`\n    cursor: pointer;\n    color: white;\n    font-size: 16px;\n    padding: 8px;\n    font-weight: bold;\n    margin: 8px 20px 8px 20px;\n    float: right;\n`;\n\nexport const DrawerFormField = styled('div')`\n    padding: 10px 20px;\n    display: flex;\n    align-items: center;\n    flex: 1;\n    > label {\n        font-size: 12px;\n        padding-right: 10px;\n    }\n`;\n\nexport const SelectWrapper = styled('div')`\n    position: relative;\n    z-index: 0;\n    display: inline-block;\n    overflow: hidden;\n    height: auto;\n    padding: 0 5px 0 0;\n    margin: 0 5px 0 0;\n    border-radius: 5px;\n    border: solid 1px #ccc;\n    background-color: #fff;\n    :before {\n        position: absolute;\n        z-index: 1;\n        content: '\\\\25BE';\n        top: 50%;\n        right: 10px;\n        margin-top: -9px;\n    }\n    select {\n        position: relative;\n        z-index: 2;\n        outline: none;\n        width: 120%;\n        padding: 5px 20px 5px 10px;\n        background-color: transparent;\n        background-image: none;\n        -webkit-appearance: none;\n        border: none;\n        box-shadow: none;\n    }\n`;\n\nexport const CheckboxWrapper = styled('div')`\n    font-size: 12px;\n    text-decoration: underline;\n    cursor: pointer;\n    input {\n        margin-right: 10px;\n        cursor: pointer;\n    }\n`;\n","import { saveAs } from 'file-saver';\nimport * as React from 'react';\nimport * as luisAdapter from '../../../src/adapters/luis';\nimport * as rasaAdapter from '../../../src/adapters/rasa';\nimport * as snipsAdapter from '../../../src/adapters/snips';\nimport * as webAdapter from '../../../src/adapters/web';\nimport * as chatito from '../../../src/main';\nimport * as utils from '../../../src/utils';\nimport { chatitoPrism, rasaDefaultOptions, snipsDefaultOptions, tabs } from '../../lib/editorConfig';\nimport { debounce } from '../../lib/utils';\nimport * as es from './editorStyles';\n\nconst logger = console;\n\nconst adapters = {\n    default: webAdapter,\n    rasa: rasaAdapter,\n    snips: snipsAdapter,\n    luis: luisAdapter\n};\n\ninterface IEditorState {\n    error: null | string;\n    warning: null | string;\n    activeTabIndex: number;\n    showDrawer: boolean;\n    dataset: any;\n    adapterOptions: any;\n    currentAdapter: 'default' | 'rasa' | 'snips' | 'luis';\n    useCustomOptions: boolean;\n    frequencyDistribution: 'regular' | 'even';\n}\n\ntype IDataset = webAdapter.IDefaultDataset | snipsAdapter.ISnipsDataset | rasaAdapter.IRasaDataset | luisAdapter.ILuisDataset;\n\n// NOTE: for SSR, wrap the require in check for window\nlet CodeFlask = null;\nlet ReactJson = null;\nif (typeof window !== `undefined`) {\n    // tslint:disable-next-line:no-var-requires\n    CodeFlask = require('codeflask').default;\n    // tslint:disable-next-line:no-var-requires\n    ReactJson = require('react-json-view').default;\n}\n\nexport default class Editor extends React.Component<{}, IEditorState> {\n    public state: IEditorState = {\n        error: null,\n        warning: null,\n        activeTabIndex: 0,\n        showDrawer: false,\n        dataset: null,\n        adapterOptions: null,\n        currentAdapter: 'default',\n        useCustomOptions: false,\n        frequencyDistribution: 'regular'\n    };\n    private tabsContainer = React.createRef() as React.RefObject<HTMLDivElement>;\n    private codeflask = null;\n    private editorUpdatesSetupCount = 0;\n    private codeInputValue = '';\n    private tabs: Array<{ title: string; value: string }> = [];\n\n    private debouncedTabDSLValidation = debounce(() => {\n        if (!this.codeInputValue.length) {\n            if (this.state.error || this.state.warning) {\n                this.setState({ error: null, warning: null });\n            }\n            return;\n        }\n        const validation = this.getDSLValidation(this.codeInputValue);\n        let newState = {};\n        if (validation && validation.error) {\n            newState = { error: validation.error, warning: null };\n        } else if (validation && validation.warning) {\n            newState = { error: null, warning: validation.warning };\n        } else {\n            newState = { error: null, warning: null };\n        }\n        this.setState(newState, () => {\n            this.saveToLocalStorage(true, false, false);\n        });\n    }, 300);\n\n    public componentDidMount() {\n        if (!CodeFlask) {\n            return;\n        }\n        this.loadFromLocalStorage(() => {\n            const flask = new CodeFlask('#my-code-editor', {\n                language: 'chatito',\n                lineNumbers: true\n            });\n            flask.addLanguage('chatito', chatitoPrism);\n            flask.onUpdate(code => {\n                if (!this.tabs || !this.tabs[this.state.activeTabIndex]) {\n                    return;\n                }\n                this.codeInputValue = code;\n                this.tabs[this.state.activeTabIndex].value = code;\n                // NOTE: ugly hack to know when codeflask is mounted (it makes 2 calls to update on mount)\n                if (this.editorUpdatesSetupCount < 2) {\n                    this.editorUpdatesSetupCount++;\n                } else {\n                    this.setState({ dataset: null });\n                    this.debouncedTabDSLValidation();\n                }\n            });\n            if (this.tabs && this.tabs[this.state.activeTabIndex]) {\n                flask.updateCode(this.tabs[this.state.activeTabIndex].value);\n            }\n            flask.setLineNumber();\n            this.codeflask = flask;\n        });\n    }\n\n    public render() {\n        const alertState = !!this.state.error ? 'error' : !!this.state.warning ? 'warning' : 'success';\n        return (\n            <es.EditorWrapper>\n                <es.EditorHeader>\n                    <es.TabsArea innerRef={this.tabsContainer}>{this.tabs.map(this.renderTabButton)}</es.TabsArea>\n                    <es.TabsAreaButton onClick={this.onAddFile} style={{ backgroundColor: '#1a6849' }}>\n                        New file\n                    </es.TabsAreaButton>\n                    <es.TabsAreaButton onClick={this.onToggleDrawer} disabled={!!this.state.error}>\n                        Generate Dataset\n                    </es.TabsAreaButton>\n                </es.EditorHeader>\n                <es.CodeStyles id=\"my-code-editor\" />\n                <es.AlertNotification state={alertState}>\n                    {' '}\n                    {this.state.error || this.state.warning || `Correct syntax!`}\n                </es.AlertNotification>\n                <es.EditorOverlay onClick={this.onCloseDrawer} showDrawer={this.state.showDrawer}>\n                    <es.Drawer onClick={e => e.stopPropagation()} showDrawer={this.state.showDrawer}>\n                        <es.CloseDrawerButton onClick={this.onCloseDrawer}>x</es.CloseDrawerButton>\n                        {this.renderDatasetGeneratorSettings()}\n                        {this.renderDatasetPreviewer()}\n                    </es.Drawer>\n                </es.EditorOverlay>\n            </es.EditorWrapper>\n        );\n    }\n\n    /* ================== Renderers ================== */\n    private renderDatasetGeneratorSettings = () => {\n        return (\n            <es.BlockWrapper>\n                <es.BlockWrapperTitle>Dataset generation settings</es.BlockWrapperTitle>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    <es.DrawerFormField style={{ borderRight: '1px solid #ccc' }}>\n                        <label htmlFor=\"adapterSelect\">Dataset format: </label>\n                        <es.SelectWrapper>\n                            <select\n                                id=\"adapterSelect\"\n                                name=\"adapterSelect\"\n                                onChange={this.onAdapterChange}\n                                value={this.state.currentAdapter}\n                            >\n                                <option value=\"default\">Default</option>\n                                <option value=\"rasa\">Rasa NLU</option>\n                                <option value=\"luis\">LUIS</option>\n                                <option value=\"snips\">Snips NLU</option>\n                            </select>\n                        </es.SelectWrapper>\n                    </es.DrawerFormField>\n                    <es.DrawerFormField style={{ borderRight: '1px solid #ccc' }}>\n                        <label htmlFor=\"distributionSelect\">Default distribution: </label>\n                        <es.SelectWrapper>\n                            <select\n                                id=\"distributionSelect\"\n                                name=\"distributionSelect\"\n                                onChange={this.onDistributionChange}\n                                value={this.state.frequencyDistribution}\n                            >\n                                <option value=\"regular\">Regular</option>\n                                <option value=\"even\">Even</option>\n                            </select>\n                        </es.SelectWrapper>\n                    </es.DrawerFormField>\n                    <es.DrawerFormField>\n                        <es.CheckboxWrapper>\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={this.state.useCustomOptions}\n                                    onChange={this.onCustomOptionsCheckboxChange}\n                                />\n                                Use custom options\n                            </label>\n                        </es.CheckboxWrapper>\n                    </es.DrawerFormField>\n                </div>\n                <div style={{ textAlign: 'center', fontSize: 13, maxWidth: '80%', margin: '1rem auto' }}>\n                    * NLP providers like DialogFlow, Wit.ai and Watson can be used with a conversion tool. Read the&nbsp;\n                    <a href=\"https://github.com/rodrigopivi/Chatito#tools-and-resources\" target=\"_blank\">\n                        resources section\n                    </a>\n                </div>\n                {this.renderEditAdapterOptions()}\n                <div style={{ padding: 20, textAlign: 'center' }}>\n                    <es.TabsAreaButton onClick={this.generateDataset}>Generate and download dataset!</es.TabsAreaButton>\n                </div>\n            </es.BlockWrapper>\n        );\n    };\n\n    private renderEditAdapterOptions = () => {\n        if (!this.state.useCustomOptions || !ReactJson) {\n            return null;\n        }\n        return (\n            <div>\n                <div style={{ padding: '10px 20px 0 20px', fontSize: 12, borderTop: '1px solid #ccc' }}>\n                    Edit the adapter custom initial options:\n                </div>\n                <div style={{ flex: '1', margin: '10px 20px' }}>\n                    <ReactJson\n                        style={{ padding: '10px' }}\n                        src={this.state.adapterOptions || {}}\n                        theme=\"summerfruit:inverted\"\n                        iconStyle=\"square\"\n                        enableClipboard={false}\n                        displayDataTypes={false}\n                        name={false}\n                        collapsed={false}\n                        onEdit={this.onEditAdapterOptions}\n                        onAdd={this.onEditAdapterOptions}\n                        onDelete={this.onEditAdapterOptions}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    private renderDatasetPreviewer = () => {\n        if (!this.state.dataset || !ReactJson) {\n            return null;\n        }\n        return (\n            <es.BlockWrapper>\n                <es.BlockWrapperTitle>Review the generated training dataset</es.BlockWrapperTitle>\n                <ReactJson\n                    style={{ padding: 20 }}\n                    src={this.state.dataset}\n                    theme=\"chalk\"\n                    iconStyle=\"square\"\n                    enableClipboard={false}\n                    displayDataTypes={false}\n                    name={false}\n                    collapsed={2}\n                />\n            </es.BlockWrapper>\n        );\n    };\n\n    private renderTabButton = (t, i) => {\n        const changeTab = () => this.changeTab(i);\n        const onCloseTab = this.closerTab(i);\n        return (\n            <es.TabButton active={this.state.activeTabIndex === i} key={`tab-${i}`} onClick={changeTab}>\n                {t.title}\n                <es.CloseTab onClick={onCloseTab} />\n            </es.TabButton>\n        );\n    };\n\n    /* ================== Event Handlers ================== */\n    private onCloseDrawer = () => this.setState({ showDrawer: false, dataset: null });\n\n    private onCustomOptionsCheckboxChange = e => {\n        let adapterOptions = {};\n        if (this.state.currentAdapter === 'rasa') {\n            adapterOptions = Object.assign({}, rasaDefaultOptions);\n        } else if (this.state.currentAdapter === 'snips') {\n            adapterOptions = Object.assign({}, snipsDefaultOptions);\n        }\n        this.setState({ useCustomOptions: e.target.checked, adapterOptions, dataset: null }, () => {\n            this.saveToLocalStorage(false, true, true);\n        });\n    };\n\n    private onAdapterChange = e => {\n        let adapterOptions = {};\n        if (e.target.value === 'rasa') {\n            adapterOptions = Object.assign({}, rasaDefaultOptions);\n        } else if (e.target.value === 'snips') {\n            adapterOptions = Object.assign({}, snipsDefaultOptions);\n        }\n        this.setState({ currentAdapter: e.target.value, adapterOptions, dataset: null }, () => {\n            this.saveToLocalStorage(false, true, true);\n        });\n    };\n\n    private onDistributionChange = e => {\n        this.setState(\n            {\n                frequencyDistribution: e.target.value === 'even' ? 'even' : 'regular',\n                dataset: null\n            },\n            () => this.saveToLocalStorage(false, true, true)\n        );\n    };\n\n    private onEditAdapterOptions = changes => {\n        if (changes && changes.updated_src) {\n            this.setState({ adapterOptions: changes.updated_src }, () => {\n                this.saveToLocalStorage(false, true, false);\n            });\n            return null;\n        }\n        return false;\n    };\n\n    private onAddFile = () => {\n        let filename = 'newFile';\n        if (window && window.prompt) {\n            filename = prompt('Please enter the new .chatito file name:', filename);\n        }\n        if (filename) {\n            this.tabs.push({ title: `${filename}.chatito`, value: '' });\n            this.changeTab(this.tabs.length - 1, () => {\n                this.tabsContainer.current.scrollTo({\n                    left: this.tabsContainer.current.scrollWidth,\n                    behavior: 'smooth'\n                });\n            });\n        }\n    };\n\n    private onToggleDrawer = async () => {\n        if (!this.state.showDrawer) {\n            if (this.validateChatitoFiles()) {\n                try {\n                    this.setState({ showDrawer: !this.state.showDrawer });\n                } catch (e) {\n                    return;\n                }\n            } else {\n                if (window && window.alert) {\n                    window.alert('Please fix the errors or warnings found in the code.');\n                }\n            }\n        }\n    };\n\n    /* ================== Utils ================== */\n\n    private saveToLocalStorage = (saveTabs, saveAdapterOptions, saveCurrentAdapter) => {\n        if (window && localStorage) {\n            if (saveTabs) {\n                localStorage.setItem('___tabs', JSON.stringify(this.tabs));\n            }\n            if (saveAdapterOptions) {\n                localStorage.setItem('___adapterOptions', this.state.useCustomOptions ? JSON.stringify(this.state.adapterOptions) : '');\n                localStorage.setItem('___defaultDistribution', this.state.frequencyDistribution);\n            }\n            if (saveCurrentAdapter) {\n                localStorage.setItem('___currentAdapter', this.state.currentAdapter);\n            }\n        }\n    };\n\n    private loadFromLocalIfPresent = (key: string, parseAsJSON: boolean) => {\n        if (window && localStorage) {\n            try {\n                const item = localStorage.getItem(key);\n                if (!parseAsJSON) {\n                    return item;\n                }\n                if (item) {\n                    try {\n                        return JSON.parse(item);\n                    } catch (e) {\n                        // just catch the error\n                    }\n                }\n            } catch (e) {\n                logger.error(e);\n            }\n        }\n    };\n\n    private loadFromLocalStorage = (cb: () => void) => {\n        if (window && localStorage) {\n            const newState: any = {};\n            const localTabs = this.loadFromLocalIfPresent('___tabs', true);\n            const localAdapterOptions = this.loadFromLocalIfPresent('___adapterOptions', true);\n            const localCurrentAdapter = this.loadFromLocalIfPresent('___currentAdapter', false);\n            const localDefaultDistribution: 'regular' | 'even' | undefined = this.loadFromLocalIfPresent('___defaultDistribution', false);\n            this.tabs = localTabs ? localTabs : tabs;\n            if (localAdapterOptions) {\n                newState.adapterOptions = localAdapterOptions;\n                newState.useCustomOptions = true;\n            }\n            if (localCurrentAdapter) {\n                newState.currentAdapter = localCurrentAdapter;\n            }\n            if (localDefaultDistribution) {\n                newState.frequencyDistribution = localDefaultDistribution;\n            }\n            this.setState(newState, cb);\n        } else {\n            this.tabs = tabs;\n        }\n        cb();\n    };\n\n    private changeTab = (i: number, cb?: () => void) => {\n        this.setState({ activeTabIndex: i }, () => {\n            this.codeflask.updateCode(this.tabs[this.state.activeTabIndex].value);\n            this.codeflask.setLineNumber();\n            if (cb) {\n                setTimeout(cb, 600); // note; hack using setTimeout because codeflask uses a timeout on update code\n            }\n        });\n    };\n\n    private closerTab = (i: number) => {\n        return (e: React.SyntheticEvent) => {\n            if (e) {\n                e.stopPropagation();\n            }\n            if (this.tabs[i].value) {\n                if (!window.confirm(`Do you really want to remove '${this.tabs[i].title}'?`)) {\n                    return;\n                }\n            }\n            const ati = this.state.activeTabIndex;\n            let newActiveTabIndex = this.state.activeTabIndex;\n            if (ati === i && ati > 0) {\n                newActiveTabIndex = ati - 1;\n            }\n            this.tabs = [...this.tabs.slice(0, i), ...this.tabs.slice(i + 1)];\n            if (!this.tabs.length) {\n                this.tabs.push({ title: 'newFile.chatito', value: '' });\n                newActiveTabIndex = 0;\n            }\n            this.saveToLocalStorage(true, false, false);\n            this.changeTab(newActiveTabIndex);\n        };\n    };\n\n    private getDSLValidation = (dsl: string): null | { error?: string; warning?: string } => {\n        try {\n            const ast = chatito.astFromString(dsl);\n            const intentsWithoutLimit = ast.filter(entity => entity.type === 'IntentDefinition' && entity.args === null);\n            if (intentsWithoutLimit.length) {\n                return {\n                    warning: `Warning: Limit the number of generated examples for intents. E.g.: %[${\n                        intentsWithoutLimit[0].key\n                    }]('training': '100')`\n                };\n            }\n            return null;\n        } catch (e) {\n            const error =\n                e.constructor === Error\n                    ? e.toString()\n                    : `${e.name}: ${e.message} Line: ${e.location.start.line}, Column: ${e.location.start.column}`;\n            return { error };\n        }\n    };\n\n    private validateChatitoFiles = () => {\n        return !this.tabs.some((tab, i) => {\n            if (tab.value) {\n                const validation = this.getDSLValidation(tab.value);\n                if (validation !== null) {\n                    this.changeTab(i);\n                    return true;\n                }\n            }\n            return false;\n        });\n    };\n\n    private importFile = (startPath: string, endPath: string) => {\n        const filename = endPath.replace(/^\\.\\//, '');\n        const tabFound = this.tabs.find(t => t.title.trim() === filename);\n        if (!tabFound) {\n            throw new Error(`Can't import ${endPath}. Not found.`);\n        }\n        // note: returning empty path since there is no actual filesystem\n        return { filePath: '', dsl: tabFound.value };\n    };\n\n    private generateDataset = async () => {\n        let dataset: IDataset | null = null;\n        const testingDataset = {};\n        const adapter = adapters[this.state.currentAdapter];\n        if (!adapter) {\n            return;\n        }\n        chatito.config.defaultDistribution = this.state.frequencyDistribution;\n        for (const [i, tab] of this.tabs.entries()) {\n            try {\n                if (dataset === null && this.state.useCustomOptions && this.state.adapterOptions) {\n                    dataset = JSON.parse(JSON.stringify(this.state.adapterOptions));\n                }\n                const { training, testing } = await adapter.adapter(tab.value, dataset, this.importFile, '');\n                dataset = training;\n                utils.mergeDeep(testingDataset, testing);\n            } catch (e) {\n                this.setState({ dataset: null, showDrawer: false }, () => {\n                    this.changeTab(i, () =>\n                        this.setState({ error: e.message }, () => {\n                            if (window && window.alert) {\n                                logger.log(e);\n                                window.alert(`Please fix error: ${e.message}`);\n                            }\n                        })\n                    );\n                });\n                return;\n            }\n        }\n        const datasetBlob = new Blob([JSON.stringify(dataset)], { type: 'text/json;charset=utf-8' });\n        const testingBlob = new Blob([JSON.stringify(testingDataset)], { type: 'text/json;charset=utf-8' });\n        saveAs(datasetBlob, `training_dataset_${Math.round(new Date().getTime() / 1000)}.json`);\n        setTimeout(() => {\n            saveAs(testingBlob, `testing_dataset_${Math.round(new Date().getTime() / 1000)}.json`);\n        }, 100); // note: timeout to allow multiple downloads at once\n        this.setState({ dataset });\n    };\n}\n","export function debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n}\n","import styled, { createGlobalStyle } from 'styled-components';\n\n// tslint:disable-next-line:no-unused-expression\nexport const Global: any = createGlobalStyle`\n  *, *::after, *::before {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  :focus { outline: none; }\n  h1, h2 { display: inline; font-size: 20px; }\n  ::-moz-focus-inner { border: 0; }\n  html, body, #app {\n      padding: 0;\n      margin: 0;\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      height: auto !important;\n      font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif;\n      background-color: #ccc;\n  }\n  a { text-decoration: none; }\n  body {\n      box-sizing: border-box;\n      min-height: 100vh;\n      background: #ececec;\n      padding: 0;\n  }\n  a:focus, a:active, a:any-link { text-decoration: none; }\n`;\n\nexport const Header = styled('div')`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    h1,\n    h2 {\n        display: inline;\n    }\n    a {\n        text-decoration: none;\n        color: #990adb;\n    }\n    a:hover {\n        color: #b92afb;\n    }\n    color: '#444';\n    margin: 20px;\n`;\n","import * as React from 'react';\n\nexport default function Logo() {\n    return (\n        <svg fill=\"#990ADB\" viewBox=\"0 0 14 12\" version=\"1.1\" x=\"0px\" y=\"0px\">\n            <g stroke=\"none\" fill=\"none\">\n                <g fill=\"#990ADB\">\n                    <path d=\"M7.032,5.504 C6.672,5.504 6.384,5.792 6.384,6.152 C6.384,6.512 6.672,6.8 7.032,6.8 C7.392,6.8 7.68,6.512 7.68,6.152 C7.688,5.792 7.392,5.504 7.032,5.504 Z M3.88,5.504 C3.52,5.504 3.232,5.792 3.232,6.152 C3.232,6.512 3.52,6.8 3.88,6.8 C4.24,6.8 4.528,6.512 4.528,6.152 C4.528,5.792 4.24,5.504 3.88,5.504 Z M9.544,6.152 C9.544,6.512 9.832,6.8 10.192,6.8 C10.552,6.8 10.84,6.512 10.84,6.152 C10.84,5.792 10.552,5.504 10.192,5.504 C9.832,5.504 9.544,5.792 9.544,6.152 Z\" />\n                    <path d=\"M13.024,3.096 L13.024,3.08 C13.024,2.744 12.856,1.272 12.368,0.816 C12.208,0.664 12.048,0.64 11.944,0.648 C11.544,0.664 10.976,1.088 10.336,1.6 C10.264,1.656 10.184,1.72 10.12,1.768 L4.328,1.768 C4.184,1.768 4.032,1.76 3.888,1.768 C3.856,1.744 3.832,1.736 3.8,1.704 C3.232,1.16 2.68,0.664 2.24,0.648 C2.136,0.64 1.976,0.672 1.816,0.816 C1.376,1.232 1.192,2.48 1.16,2.952 C1.136,2.968 1.12,2.984 1.104,3.008 C0.624,3.624 0.312,4.584 0.312,5.456 L0.312,6.8 C0.312,8.064 1.024,9.184 2.104,9.848 L2.104,11.392 C2.104,11.456 2.152,11.504 2.216,11.504 C2.248,11.504 2.272,11.496 2.296,11.472 L3.392,10.376 C3.728,10.456 4.08,10.496 4.424,10.496 L9.752,10.496 C11.992,10.496 13.752,8.872 13.752,6.8 L13.752,5.456 C13.752,4.624 13.472,3.704 13.024,3.096 Z M13.08,6.8 C13.08,8.496 11.616,9.824 9.752,9.824 L4.424,9.824 C2.528,9.824 0.984,8.464 0.984,6.8 L0.984,5.456 C0.984,4.736 1.248,3.92 1.632,3.424 C1.648,3.4 1.672,3.368 1.688,3.344 C1.824,3.192 1.816,3.064 1.832,2.888 C1.848,2.68 1.88,2.472 1.928,2.264 C1.984,1.968 2.048,1.552 2.248,1.32 C2.424,1.376 2.784,1.664 3.328,2.184 C3.584,2.424 3.744,2.44 4,2.44 L10.024,2.44 C10.248,2.44 10.392,2.416 10.76,2.128 C10.992,1.944 11.672,1.408 11.936,1.336 C12.128,1.552 12.36,2.536 12.36,3.048 C12.352,3.184 12.384,3.312 12.464,3.424 C12.84,3.92 13.088,4.776 13.088,5.472 L13.08,6.8 Z\" />\n                </g>\n            </g>\n        </svg>\n    );\n}\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport Editor from '../components/Editor/Editor';\nimport { Global, Header } from '../components/globalStyles';\nimport Logo from '../components/Logo';\n\n// NOTE: gatsby global for prefix\ndeclare var __PATH_PREFIX__;\n\nexport default class Index extends React.Component<{}, {}> {\n    public render() {\n        return (\n            <div>\n                <Helmet>\n                    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={`${__PATH_PREFIX__}/apple-touch-icon.png`} />\n                    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={`${__PATH_PREFIX__}/favicon-32x32.png`} />\n                    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={`${__PATH_PREFIX__}/favicon-16x16.png`} />\n                    <link rel=\"manifest\" href={`${__PATH_PREFIX__}/site.webmanifest`} />\n                    <link rel=\"mask-icon\" href={`${__PATH_PREFIX__}/safari-pinned-tab.svg`} color=\"#5bbad5\" />\n                    <meta name=\"msapplication-TileColor\" content=\"#da532c\" />\n                    <meta name=\"theme-color\" content=\"#ffffff\" />\n                    <title>Chatito DSL - Generate dataset for chatbots</title>\n                    <meta\n                        name=\"keywords\"\n                        content=\"chatbot, dataset generation, dataset generator, generate datasets, rasa nlu, snips nlu, chatbot dataset, datasets for chatbots\"\n                    />\n                    <meta\n                        name=\"description\"\n                        content=\"Chatito helps you helps you generate datasets for natural language understanding models using a simple DSL\"\n                    />\n                </Helmet>\n                <Global />\n                <Header>\n                    <div style={{ display: 'inline-block', width: 50, minWidth: 50, height: 43 }}>\n                        <Logo />\n                    </div>\n                    <div style={{ paddingLeft: 24 }}>\n                        <h1>\n                            <a href=\"https://github.com/rodrigopivi/Chatito\">Chatito</a>\n                        </h1>\n                        <h2>\n                            &nbsp;helps you generate datasets for natural language understanding models using a simple DSL&nbsp;\n                            <a href=\"https://github.com/rodrigopivi/Chatito\">Read the docs</a>\n                        </h2>\n                    </div>\n                </Header>\n                <Editor />\n            </div>\n        );\n    }\n}\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\"use strict\";\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function _class(expectation) {\n      var escapedParts = \"\",\n          i;\n\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any(expectation) {\n      return \"any character\";\n    },\n    end: function end(expectation) {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i,\n        j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n      peg$startRuleFunctions = {\n    Start: peg$parseStart\n  },\n      peg$startRuleFunction = peg$parseStart,\n      peg$c0 = function peg$c0(od) {\n    return od;\n  },\n      peg$c1 = \"*[\",\n      peg$c2 = peg$literalExpectation(\"*[\", false),\n      peg$c3 = \"%\",\n      peg$c4 = peg$literalExpectation(\"%\", false),\n      peg$c5 = \"]\",\n      peg$c6 = peg$literalExpectation(\"]\", false),\n      peg$c7 = function peg$c7(probability, percent) {\n    return \"\" + probability + (percent || '');\n  },\n      peg$c8 = \"?\",\n      peg$c9 = peg$literalExpectation(\"?\", false),\n      peg$c10 = \"[\",\n      peg$c11 = peg$literalExpectation(\"[\", false),\n      peg$c12 = function peg$c12(value) {\n    return value;\n  },\n      peg$c13 = function peg$c13(value, opt) {\n    return {\n      value: value,\n      opt: !!opt\n    };\n  },\n      peg$c14 = function peg$c14(value, args) {\n    return {\n      value: value,\n      type: \"IntentDefinition\",\n      args: args,\n      location: location()\n    };\n  },\n      peg$c15 = \"\\r\\n\",\n      peg$c16 = peg$literalExpectation(\"\\r\\n\", false),\n      peg$c17 = \"\\n\",\n      peg$c18 = peg$literalExpectation(\"\\n\", false),\n      peg$c19 = \"~[\",\n      peg$c20 = peg$literalExpectation(\"~[\", false),\n      peg$c21 = \"@[\",\n      peg$c22 = peg$literalExpectation(\"@[\", false),\n      peg$c23 = peg$anyExpectation(),\n      peg$c24 = function peg$c24(t) {\n    return t.join(\"\");\n  },\n      peg$c25 = function peg$c25(v) {\n    return v.join(\"\");\n  },\n      peg$c26 = function peg$c26(value) {\n    return {\n      value: value,\n      type: \"Text\"\n    };\n  },\n      peg$c27 = function peg$c27(p, s) {\n    return {\n      sentence: s,\n      probability: p\n    };\n  },\n      peg$c28 = function peg$c28(o, s) {\n    return {\n      type: o.type,\n      key: o.value,\n      args: o.args,\n      location: o.location,\n      inner: s\n    };\n  },\n      peg$c29 = \"#\",\n      peg$c30 = peg$literalExpectation(\"#\", false),\n      peg$c31 = function peg$c31(id) {\n    return id;\n  },\n      peg$c32 = function peg$c32(value, variation, args) {\n    return {\n      value: value,\n      type: \"SlotDefinition\",\n      variation: variation,\n      args: args,\n      location: location()\n    };\n  },\n      peg$c33 = function peg$c33(value, variation, opt) {\n    return {\n      value: value,\n      opt: !!opt,\n      variation: variation\n    };\n  },\n      peg$c34 = \"@\",\n      peg$c35 = peg$literalExpectation(\"@\", false),\n      peg$c36 = function peg$c36(op) {\n    return {\n      value: op.value,\n      type: \"Slot\",\n      opt: op.opt,\n      location: location(),\n      variation: op.variation\n    };\n  },\n      peg$c37 = function peg$c37(o, s) {\n    return {\n      type: o.type,\n      key: o.value,\n      args: o.args,\n      location: o.location,\n      inner: s,\n      variation: o.variation\n    };\n  },\n      peg$c38 = \"~\",\n      peg$c39 = peg$literalExpectation(\"~\", false),\n      peg$c40 = function peg$c40(value, args) {\n    return {\n      value: value,\n      type: \"AliasDefinition\",\n      location: location(),\n      args: args\n    };\n  },\n      peg$c41 = function peg$c41(op) {\n    return {\n      value: op.value,\n      type: \"Alias\",\n      opt: op.opt\n    };\n  },\n      peg$c42 = function peg$c42(o, s) {\n    return {\n      type: o.type,\n      key: o.value,\n      location: o.location,\n      inner: s,\n      args: o.args\n    };\n  },\n      peg$c43 = peg$otherExpectation(\"correct indentation\"),\n      peg$c44 = \" \",\n      peg$c45 = peg$literalExpectation(\" \", false),\n      peg$c46 = function peg$c46(s) {\n    return s.length === level * STEP;\n  },\n      peg$c47 = function peg$c47() {\n    level++;\n    return true;\n  },\n      peg$c48 = function peg$c48() {\n    level--;\n    return true;\n  },\n      peg$c49 = \"//\",\n      peg$c50 = peg$literalExpectation(\"//\", false),\n      peg$c51 = function peg$c51(c) {\n    return {\n      type: \"Comment\",\n      value: c.trim()\n    };\n  },\n      peg$c52 = \"import \",\n      peg$c53 = peg$literalExpectation(\"import \", false),\n      peg$c54 = function peg$c54(s) {\n    return {\n      type: \"ImportFile\",\n      value: s.trim()\n    };\n  },\n      peg$c55 = peg$otherExpectation(\"entity name\"),\n      peg$c56 = peg$otherExpectation(\"number\"),\n      peg$c57 = function peg$c57() {\n    return parseFloat(text());\n  },\n      peg$c58 = \".\",\n      peg$c59 = peg$literalExpectation(\".\", false),\n      peg$c60 = /^[1-9]/,\n      peg$c61 = peg$classExpectation([[\"1\", \"9\"]], false, false),\n      peg$c62 = /^[0-9]/,\n      peg$c63 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c64 = \"0\",\n      peg$c65 = peg$literalExpectation(\"0\", false),\n      peg$c66 = peg$otherExpectation(\"end of sentence\"),\n      peg$c67 = peg$otherExpectation(\"end of line \"),\n      peg$c68 = peg$otherExpectation(\"non windows end of line\"),\n      peg$c69 = peg$otherExpectation(\"windows end of line\"),\n      peg$c70 = \"(\",\n      peg$c71 = peg$literalExpectation(\"(\", false),\n      peg$c72 = \")\",\n      peg$c73 = peg$literalExpectation(\")\", false),\n      peg$c74 = function peg$c74(args) {\n    return args.reduce(function (prev, curr) {\n      prev[curr.key] = curr.value;\n      return prev;\n    }, {});\n  },\n      peg$c75 = \":\",\n      peg$c76 = peg$literalExpectation(\":\", false),\n      peg$c77 = \",\",\n      peg$c78 = peg$literalExpectation(\",\", false),\n      peg$c79 = function peg$c79(ek, ev) {\n    return {\n      key: ek,\n      value: ev\n    };\n  },\n      peg$c80 = \"\\\"\",\n      peg$c81 = peg$literalExpectation(\"\\\"\", false),\n      peg$c82 = function peg$c82(chars) {\n    return chars.join('');\n  },\n      peg$c83 = \"'\",\n      peg$c84 = peg$literalExpectation(\"'\", false),\n      peg$c85 = \"\\\\\",\n      peg$c86 = peg$literalExpectation(\"\\\\\", false),\n      peg$c87 = function peg$c87(char) {\n    return char;\n  },\n      peg$c88 = function peg$c88(sequence) {\n    return sequence;\n  },\n      peg$c89 = \"b\",\n      peg$c90 = peg$literalExpectation(\"b\", false),\n      peg$c91 = function peg$c91() {\n    return \"\\b\";\n  },\n      peg$c92 = \"f\",\n      peg$c93 = peg$literalExpectation(\"f\", false),\n      peg$c94 = function peg$c94() {\n    return \"\\f\";\n  },\n      peg$c95 = \"n\",\n      peg$c96 = peg$literalExpectation(\"n\", false),\n      peg$c97 = function peg$c97() {\n    return \"\\n\";\n  },\n      peg$c98 = \"r\",\n      peg$c99 = peg$literalExpectation(\"r\", false),\n      peg$c100 = function peg$c100() {\n    return \"\\r\";\n  },\n      peg$c101 = \"t\",\n      peg$c102 = peg$literalExpectation(\"t\", false),\n      peg$c103 = function peg$c103() {\n    return \"\\t\";\n  },\n      peg$c104 = \"v\",\n      peg$c105 = peg$literalExpectation(\"v\", false),\n      peg$c106 = function peg$c106() {\n    return \"\\x0B\";\n  },\n      peg$c107 = \"u\",\n      peg$c108 = peg$literalExpectation(\"u\", false),\n      peg$c109 = function peg$c109(digits) {\n    return String.fromCharCode(parseInt(digits, 16));\n  },\n      peg$c110 = /^[0-9a-f]/i,\n      peg$c111 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"]], false, true),\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n        p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$parseStart() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parseImportFile();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseTopLevelStatement();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseCommentLine();\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseImportFile();\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseTopLevelStatement();\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseCommentLine();\n          }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseTopLevelStatement() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parseIntentDefinition();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseSlotDefinition();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseAliasDefinition();\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseProbabilityOperatorDefinition() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c1) {\n      s1 = peg$c1;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c2);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseNumber();\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s3 = peg$c3;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c4);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s4 = peg$c5;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c6);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c7(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityOpt() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 63) {\n      s0 = peg$c8;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c9);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityBody() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c10;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c11);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntityKeywordLiteral();\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s3 = peg$c5;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c6);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c12(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityOptionalBody() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c10;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c11);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntityKeywordLiteral();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEntityOpt();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s4 = peg$c5;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c6);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityIntentDefinition() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 37) {\n      s1 = peg$c3;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c4);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntityBody();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEntityArguments();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c14(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseAnyTextWithSlotAndAlias() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s5 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s5 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s6 = peg$c17;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c18);\n        }\n      }\n\n      peg$silentFails--;\n\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c19) {\n          s7 = peg$c19;\n          peg$currPos += 2;\n        } else {\n          s7 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c20);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n\n        if (s6 !== peg$FAILED) {\n          s7 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.substr(peg$currPos, 2) === peg$c21) {\n            s8 = peg$c21;\n            peg$currPos += 2;\n          } else {\n            s8 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c22);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s8 === peg$FAILED) {\n            s7 = void 0;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n\n          if (s7 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n              }\n            }\n\n            if (s8 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7, s8];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      peg$savedPos = s2;\n      s3 = peg$c24(s3);\n    }\n\n    s2 = s3;\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c15) {\n          s5 = peg$c15;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c16);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s6 = peg$c17;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c18);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n\n            if (input.substr(peg$currPos, 2) === peg$c19) {\n              s7 = peg$c19;\n              peg$currPos += 2;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n              }\n            }\n\n            peg$silentFails--;\n\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n\n              if (input.substr(peg$currPos, 2) === peg$c21) {\n                s8 = peg$c21;\n                peg$currPos += 2;\n              } else {\n                s8 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c22);\n                }\n              }\n\n              peg$silentFails--;\n\n              if (s8 === peg$FAILED) {\n                s7 = void 0;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n\n              if (s7 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c23);\n                  }\n                }\n\n                if (s8 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c24(s3);\n        }\n\n        s2 = s3;\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c25(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseIntentAndSlotKeywordLiterals() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parseAnyTextWithSlotAndAlias();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c26(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseIntentAndSlotValidInner() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parseOptionalSlot();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOptionalAlias();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseIntentAndSlotKeywordLiterals();\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseOptionalSlot();\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOptionalAlias();\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseIntentAndSlotKeywordLiterals();\n          }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseIntentAndSlotInnerStatements() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parseIntentAndSlotInnerStatement();\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseIntentAndSlotInnerStatement();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseIntentAndSlotInnerStatement() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parseSamedent();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseProbabilityOperatorDefinition();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseIntentAndSlotValidInner();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEOS();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseIntentDefinition() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parseEOL();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntityIntentDefinition();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEOL();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseIndent();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseIntentAndSlotInnerStatements();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseDedent();\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c28(s2, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSlotVariationStartDefinition() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s0 = peg$c29;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c30);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSlotVariationDefinition() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parseSlotVariationStartDefinition();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseSlotKeywordLiteral();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c31(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntitySlotDefinition() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 2) === peg$c21) {\n      s1 = peg$c21;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseSlotKeywordLiteral();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSlotVariationDefinition();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s4 = peg$c5;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c6);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseEntityArguments();\n\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c32(s2, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSlotOptionalBody() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c10;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c11);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseSlotKeywordLiteral();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSlotVariationDefinition();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEntityOpt();\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c5;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c6);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c33(s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOptionalSlot() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s1 = peg$c34;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c35);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseSlotOptionalBody();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c36(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseAnyTextWithAlias() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s5 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s5 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s6 = peg$c17;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c18);\n        }\n      }\n\n      peg$silentFails--;\n\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c19) {\n          s7 = peg$c19;\n          peg$currPos += 2;\n        } else {\n          s7 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c20);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n\n        if (s6 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s7 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c23);\n            }\n          }\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      peg$savedPos = s2;\n      s3 = peg$c24(s3);\n    }\n\n    s2 = s3;\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c15) {\n          s5 = peg$c15;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c16);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s6 = peg$c17;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c18);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n\n            if (input.substr(peg$currPos, 2) === peg$c19) {\n              s7 = peg$c19;\n              peg$currPos += 2;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n              }\n            }\n\n            peg$silentFails--;\n\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c23);\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c24(s3);\n        }\n\n        s2 = s3;\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c25(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseSlotKeywordLiterals() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parseAnyTextWithAlias();\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c26(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseSlotValidInner() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parseOptionalAlias();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseSlotKeywordLiterals();\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseOptionalAlias();\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSlotKeywordLiterals();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSlotInnerStatement() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parseSamedent();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseProbabilityOperatorDefinition();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSlotValidInner();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEOS();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSlotInnerStatements() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parseSlotInnerStatement();\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseSlotInnerStatement();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSlotDefinition() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parseEOL();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntitySlotDefinition();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEOL();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseIndent();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSlotInnerStatements();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseDedent();\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s2, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityAliasDefinition() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 126) {\n      s1 = peg$c38;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c39);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntityBody();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEntityArguments();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c40(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOptionalAlias() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 126) {\n      s1 = peg$c38;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c39);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntityOptionalBody();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c41(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseAliasDefinition() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = peg$parseEOL();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEntityAliasDefinition();\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEOL();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseIndent();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseIntentAndSlotInnerStatements();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseDedent();\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c42(s2, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSamedent() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (input.charCodeAt(peg$currPos) === 32) {\n      s2 = peg$c44;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c45);\n      }\n    }\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s2 = peg$c44;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c45);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c46(s1);\n\n      if (s2) {\n        s2 = void 0;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c43);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseIndent() {\n    var s0;\n    peg$savedPos = peg$currPos;\n    s0 = peg$c47();\n\n    if (s0) {\n      s0 = void 0;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDedent() {\n    var s0;\n    peg$savedPos = peg$currPos;\n    s0 = peg$c48();\n\n    if (s0) {\n      s0 = void 0;\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseAnyTextWithoutEOL() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s5 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s5 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s6 = peg$c17;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c18);\n        }\n      }\n\n      peg$silentFails--;\n\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c23);\n          }\n        }\n\n        if (s6 !== peg$FAILED) {\n          s4 = [s4, s5, s6];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      peg$savedPos = s2;\n      s3 = peg$c24(s3);\n    }\n\n    s2 = s3;\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c15) {\n          s5 = peg$c15;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c16);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s6 = peg$c17;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c18);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c24(s3);\n        }\n\n        s2 = s3;\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c25(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseDoubleSlashCommentLine() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parseEOL();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c49) {\n        s2 = peg$c49;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c50);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseAnyTextWithoutEOL();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEOS();\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c51(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseHashCommentLine() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parseEOL();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s2 = peg$c29;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c30);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseAnyTextWithoutEOL();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEOS();\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c51(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCommentLine() {\n    var s0;\n    s0 = peg$parseDoubleSlashCommentLine();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseHashCommentLine();\n    }\n\n    return s0;\n  }\n\n  function peg$parseImportFile() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parseEOL();\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 7) === peg$c52) {\n        s2 = peg$c52;\n        peg$currPos += 7;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c53);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseAnyTextWithoutEOL();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseEOS();\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c54(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBasicKeywordLiteral() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s5 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s5 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s6 = peg$c17;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c18);\n        }\n      }\n\n      peg$silentFails--;\n\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s7 = peg$c5;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c6);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n\n        if (s6 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s7 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c23);\n            }\n          }\n\n          if (s7 !== peg$FAILED) {\n            s4 = [s4, s5, s6, s7];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      peg$savedPos = s2;\n      s3 = peg$c24(s3);\n    }\n\n    s2 = s3;\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c15) {\n          s5 = peg$c15;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c16);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s6 = peg$c17;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c18);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s7 = peg$c5;\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c6);\n              }\n            }\n\n            peg$silentFails--;\n\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c23);\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c24(s3);\n        }\n\n        s2 = s3;\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c25(s1);\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c55);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityKeywordLiteral() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s5 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s5 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s6 = peg$c17;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c18);\n        }\n      }\n\n      peg$silentFails--;\n\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s7 = peg$c5;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c6);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n\n        if (s6 !== peg$FAILED) {\n          s7 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 63) {\n            s8 = peg$c8;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c9);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s8 === peg$FAILED) {\n            s7 = void 0;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n\n          if (s7 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n              }\n            }\n\n            if (s8 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7, s8];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      peg$savedPos = s2;\n      s3 = peg$c24(s3);\n    }\n\n    s2 = s3;\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c15) {\n          s5 = peg$c15;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c16);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s6 = peg$c17;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c18);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s7 = peg$c5;\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c6);\n              }\n            }\n\n            peg$silentFails--;\n\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n\n              if (input.charCodeAt(peg$currPos) === 63) {\n                s8 = peg$c8;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c9);\n                }\n              }\n\n              peg$silentFails--;\n\n              if (s8 === peg$FAILED) {\n                s7 = void 0;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n\n              if (s7 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c23);\n                  }\n                }\n\n                if (s8 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c24(s3);\n        }\n\n        s2 = s3;\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c25(s1);\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c55);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSlotKeywordLiteral() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s5 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s5 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s6 = peg$c17;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c18);\n        }\n      }\n\n      peg$silentFails--;\n\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n\n      if (s5 !== peg$FAILED) {\n        s6 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s7 = peg$c29;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c30);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n\n        if (s6 !== peg$FAILED) {\n          s7 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s8 = peg$c5;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c6);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s8 === peg$FAILED) {\n            s7 = void 0;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n\n          if (s7 !== peg$FAILED) {\n            s8 = peg$currPos;\n            peg$silentFails++;\n\n            if (input.charCodeAt(peg$currPos) === 63) {\n              s9 = peg$c8;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c9);\n              }\n            }\n\n            peg$silentFails--;\n\n            if (s9 === peg$FAILED) {\n              s8 = void 0;\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n\n            if (s8 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c23);\n                }\n              }\n\n              if (s9 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7, s8, s9];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n\n    if (s3 !== peg$FAILED) {\n      peg$savedPos = s2;\n      s3 = peg$c24(s3);\n    }\n\n    s2 = s3;\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n\n        if (input.substr(peg$currPos, 2) === peg$c15) {\n          s5 = peg$c15;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c16);\n          }\n        }\n\n        peg$silentFails--;\n\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s6 = peg$c17;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c18);\n            }\n          }\n\n          peg$silentFails--;\n\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n\n            if (input.charCodeAt(peg$currPos) === 35) {\n              s7 = peg$c29;\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c30);\n              }\n            }\n\n            peg$silentFails--;\n\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s8 = peg$c5;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c6);\n                }\n              }\n\n              peg$silentFails--;\n\n              if (s8 === peg$FAILED) {\n                s7 = void 0;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n\n              if (s7 !== peg$FAILED) {\n                s8 = peg$currPos;\n                peg$silentFails++;\n\n                if (input.charCodeAt(peg$currPos) === 63) {\n                  s9 = peg$c8;\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c9);\n                  }\n                }\n\n                peg$silentFails--;\n\n                if (s9 === peg$FAILED) {\n                  s8 = void 0;\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n\n                if (s8 !== peg$FAILED) {\n                  if (input.length > peg$currPos) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c23);\n                    }\n                  }\n\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c24(s3);\n        }\n\n        s2 = s3;\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c25(s1);\n    }\n\n    s0 = s1;\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c55);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c57();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c56);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDecimalPoint() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c58;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c59);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDigit1_9() {\n    var s0;\n\n    if (peg$c60.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c61);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDigit0_9() {\n    var s0;\n\n    if (peg$c62.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c63);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parseDecimalPoint();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseDigit0_9();\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDigit0_9();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2, s3;\n    s0 = peg$parsezero();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseDigit1_9();\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDigit0_9();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDigit0_9();\n        }\n\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsezero() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s0 = peg$c64;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c65);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOS() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = peg$parseEOL();\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseEOF();\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c66);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n    peg$silentFails++;\n    s0 = [];\n    s1 = peg$parseEOLNonWindows();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseEOLWindows();\n    }\n\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseEOLNonWindows();\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseEOLWindows();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c67);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOLNonWindows() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (input.charCodeAt(peg$currPos) === 10) {\n      s0 = peg$c17;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c18);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c68);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOLWindows() {\n    var s0, s1;\n    peg$silentFails++;\n\n    if (input.substr(peg$currPos, 2) === peg$c15) {\n      s0 = peg$c15;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c69);\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n    s0 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityArguments() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c70;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c71);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseEntityArg();\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseEntityArg();\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s3 = peg$c72;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c73);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c74(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEntityArg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (input.charCodeAt(peg$currPos) === 32) {\n      s2 = peg$c44;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c45);\n      }\n    }\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s2 = peg$c44;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c45);\n        }\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseArgumentKeyValueString();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s4 = peg$c44;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c45);\n          }\n        }\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s4 = peg$c44;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c45);\n            }\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s4 = peg$c75;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c76);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n\n            if (input.charCodeAt(peg$currPos) === 32) {\n              s6 = peg$c44;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n\n              if (input.charCodeAt(peg$currPos) === 32) {\n                s6 = peg$c44;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c45);\n                }\n              }\n            }\n\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseArgumentKeyValueString();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = [];\n\n                if (input.charCodeAt(peg$currPos) === 32) {\n                  s9 = peg$c44;\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c45);\n                  }\n                }\n\n                while (s9 !== peg$FAILED) {\n                  s8.push(s9);\n\n                  if (input.charCodeAt(peg$currPos) === 32) {\n                    s9 = peg$c44;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c45);\n                    }\n                  }\n                }\n\n                if (s8 === peg$FAILED) {\n                  s8 = null;\n                }\n\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s9 = peg$c77;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c78);\n                    }\n                  }\n\n                  if (s9 !== peg$FAILED) {\n                    s8 = [s8, s9];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n\n                  if (input.charCodeAt(peg$currPos) === 32) {\n                    s9 = peg$c44;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c45);\n                    }\n                  }\n\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n\n                    if (input.charCodeAt(peg$currPos) === 32) {\n                      s9 = peg$c44;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c45);\n                      }\n                    }\n                  }\n\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c79(s2, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseArgumentKeyValueString() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c80;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c81);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseDoubleQuotedString();\n\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseDoubleQuotedString();\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c80;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c81);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s1 = peg$c83;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c84);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseSingleQuotedString();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseSingleQuotedString();\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s3 = peg$c83;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c84);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c82(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDoubleQuotedString() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s2 = peg$c80;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c81);\n      }\n    }\n\n    if (s2 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s2 = peg$c85;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c86);\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s2 = peg$c17;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c18);\n          }\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c23);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c87(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s1 = peg$c85;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c86);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseStringEscapedChars();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSingleQuotedString() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    peg$silentFails++;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c83;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c84);\n      }\n    }\n\n    if (s2 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s2 = peg$c85;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c86);\n        }\n      }\n\n      if (s2 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s2 = peg$c17;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c18);\n          }\n        }\n      }\n    }\n\n    peg$silentFails--;\n\n    if (s2 === peg$FAILED) {\n      s1 = void 0;\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c23);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c87(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s1 = peg$c85;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c86);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseStringEscapedChars();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseStringEscapedChars() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s0 = peg$c83;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c84);\n      }\n    }\n\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s0 = peg$c80;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c81);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s0 = peg$c85;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c86);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n\n          if (input.charCodeAt(peg$currPos) === 98) {\n            s1 = peg$c89;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c90);\n            }\n          }\n\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c91();\n          }\n\n          s0 = s1;\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n\n            if (input.charCodeAt(peg$currPos) === 102) {\n              s1 = peg$c92;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c93);\n              }\n            }\n\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c94();\n            }\n\n            s0 = s1;\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n\n              if (input.charCodeAt(peg$currPos) === 110) {\n                s1 = peg$c95;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c96);\n                }\n              }\n\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c97();\n              }\n\n              s0 = s1;\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n\n                if (input.charCodeAt(peg$currPos) === 114) {\n                  s1 = peg$c98;\n                  peg$currPos++;\n                } else {\n                  s1 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c99);\n                  }\n                }\n\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c100();\n                }\n\n                s0 = s1;\n\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n\n                  if (input.charCodeAt(peg$currPos) === 116) {\n                    s1 = peg$c101;\n                    peg$currPos++;\n                  } else {\n                    s1 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c102);\n                    }\n                  }\n\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c103();\n                  }\n\n                  s0 = s1;\n\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n\n                    if (input.charCodeAt(peg$currPos) === 118) {\n                      s1 = peg$c104;\n                      peg$currPos++;\n                    } else {\n                      s1 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c105);\n                      }\n                    }\n\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c106();\n                    }\n\n                    s0 = s1;\n\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n\n                      if (input.charCodeAt(peg$currPos) === 117) {\n                        s1 = peg$c107;\n                        peg$currPos++;\n                      } else {\n                        s1 = peg$FAILED;\n\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$c108);\n                        }\n                      }\n\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$currPos;\n                        s3 = peg$currPos;\n                        s4 = peg$parseHEXDIG();\n\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parseHEXDIG();\n\n                          if (s5 !== peg$FAILED) {\n                            s6 = peg$parseHEXDIG();\n\n                            if (s6 !== peg$FAILED) {\n                              s7 = peg$parseHEXDIG();\n\n                              if (s7 !== peg$FAILED) {\n                                s4 = [s4, s5, s6, s7];\n                                s3 = s4;\n                              } else {\n                                peg$currPos = s3;\n                                s3 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s3;\n                              s3 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s3;\n                            s3 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n\n                        if (s3 !== peg$FAILED) {\n                          s2 = input.substring(s2, peg$currPos);\n                        } else {\n                          s2 = s3;\n                        }\n\n                        if (s2 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c109(s2);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseHEXDIG() {\n    var s0;\n\n    if (peg$c110.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c111);\n      }\n    }\n\n    return s0;\n  }\n\n  var STEP = 4;\n  var level = 0;\n  var entry = false;\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};"],"sourceRoot":""}